
test stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c8c  08002c8c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c8c  08002c8c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c8c  08002c8c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c8c  08002c8c  00012c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c90  08002c90  00012c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000060  08002cf0  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08002cf0  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007ffe  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e56  00000000  00000000  000280c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  00029f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000642  00000000  00000000  0002a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001773c  00000000  00000000  0002adc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8c1  00000000  00000000  000424fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080a4f  00000000  00000000  0004ddbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002458  00000000  00000000  000ce810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000d0c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c04 	.word	0x08002c04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002c04 	.word	0x08002c04

0800014c <BL_FeatchHostCommand>:
static uint8_t FlashMemory_Paylaod_Write(uint16_t *pdata, uint32_t StartAddress, uint8_t Payloadlen);
static void BL_Send_ACK(uint8_t dataLen);
static void BL_Send_NACK();

BL_status BL_FeatchHostCommand()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	BL_status status = BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef Hal_status = HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]
	uint8_t DataLen = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]
	memset(Host_buffer, 0, HOSTM_MAX_SIZE);
 800015e:	22c8      	movs	r2, #200	; 0xc8
 8000160:	2100      	movs	r1, #0
 8000162:	482b      	ldr	r0, [pc, #172]	; (8000210 <BL_FeatchHostCommand+0xc4>)
 8000164:	f002 f8bc 	bl	80022e0 <memset>
	Hal_status = HAL_UART_Receive(&huart2, Host_buffer, 1, HAL_MAX_DELAY);
 8000168:	f04f 33ff 	mov.w	r3, #4294967295
 800016c:	2201      	movs	r2, #1
 800016e:	4928      	ldr	r1, [pc, #160]	; (8000210 <BL_FeatchHostCommand+0xc4>)
 8000170:	4828      	ldr	r0, [pc, #160]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 8000172:	f001 feb4 	bl	8001ede <HAL_UART_Receive>
 8000176:	4603      	mov	r3, r0
 8000178:	71bb      	strb	r3, [r7, #6]
	if (Hal_status != HAL_OK)
 800017a:	79bb      	ldrb	r3, [r7, #6]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <BL_FeatchHostCommand+0x3a>
	{
		status = BL_NACK;
 8000180:	2300      	movs	r3, #0
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	e03e      	b.n	8000204 <BL_FeatchHostCommand+0xb8>
	}
	else
	{
		DataLen = Host_buffer[0];
 8000186:	4b22      	ldr	r3, [pc, #136]	; (8000210 <BL_FeatchHostCommand+0xc4>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	717b      	strb	r3, [r7, #5]
		Hal_status = HAL_UART_Receive(&huart2, &Host_buffer[1], DataLen, HAL_MAX_DELAY);
 800018c:	797b      	ldrb	r3, [r7, #5]
 800018e:	b29a      	uxth	r2, r3
 8000190:	f04f 33ff 	mov.w	r3, #4294967295
 8000194:	4920      	ldr	r1, [pc, #128]	; (8000218 <BL_FeatchHostCommand+0xcc>)
 8000196:	481f      	ldr	r0, [pc, #124]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 8000198:	f001 fea1 	bl	8001ede <HAL_UART_Receive>
 800019c:	4603      	mov	r3, r0
 800019e:	71bb      	strb	r3, [r7, #6]
		DataLen++;
 80001a0:	797b      	ldrb	r3, [r7, #5]
 80001a2:	3301      	adds	r3, #1
 80001a4:	717b      	strb	r3, [r7, #5]
		if (Hal_status != HAL_OK)
 80001a6:	79bb      	ldrb	r3, [r7, #6]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d002      	beq.n	80001b2 <BL_FeatchHostCommand+0x66>
		{
			status = BL_NACK;
 80001ac:	2300      	movs	r3, #0
 80001ae:	71fb      	strb	r3, [r7, #7]
 80001b0:	e028      	b.n	8000204 <BL_FeatchHostCommand+0xb8>
		}
		else
		{
			switch (Host_buffer[1])
 80001b2:	4b17      	ldr	r3, [pc, #92]	; (8000210 <BL_FeatchHostCommand+0xc4>)
 80001b4:	785b      	ldrb	r3, [r3, #1]
 80001b6:	3b10      	subs	r3, #16
 80001b8:	2b04      	cmp	r3, #4
 80001ba:	d821      	bhi.n	8000200 <BL_FeatchHostCommand+0xb4>
 80001bc:	a201      	add	r2, pc, #4	; (adr r2, 80001c4 <BL_FeatchHostCommand+0x78>)
 80001be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c2:	bf00      	nop
 80001c4:	080001d9 	.word	0x080001d9
 80001c8:	080001e1 	.word	0x080001e1
 80001cc:	080001e9 	.word	0x080001e9
 80001d0:	080001f1 	.word	0x080001f1
 80001d4:	080001f9 	.word	0x080001f9
			{
			case CBL_GET_VER_CMD: BL_Get_Version(Host_buffer); break;
 80001d8:	480d      	ldr	r0, [pc, #52]	; (8000210 <BL_FeatchHostCommand+0xc4>)
 80001da:	f000 f847 	bl	800026c <BL_Get_Version>
 80001de:	e011      	b.n	8000204 <BL_FeatchHostCommand+0xb8>
			case CBL_GET_CID_CMD: BL_Get_Chip_Idendification_nNumber(Host_buffer); break;
 80001e0:	480b      	ldr	r0, [pc, #44]	; (8000210 <BL_FeatchHostCommand+0xc4>)
 80001e2:	f000 f879 	bl	80002d8 <BL_Get_Chip_Idendification_nNumber>
 80001e6:	e00d      	b.n	8000204 <BL_FeatchHostCommand+0xb8>
			case CBL_GO_TO_ADDR_CMD: BL_SendMessage("jump to address"); break;
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <BL_FeatchHostCommand+0xd0>)
 80001ea:	f000 f819 	bl	8000220 <BL_SendMessage>
 80001ee:	e009      	b.n	8000204 <BL_FeatchHostCommand+0xb8>
			case CBL_FLASH_ERASE_CMD: Bootloader_Erase_Flash(Host_buffer); break;
 80001f0:	4807      	ldr	r0, [pc, #28]	; (8000210 <BL_FeatchHostCommand+0xc4>)
 80001f2:	f000 f8ad 	bl	8000350 <Bootloader_Erase_Flash>
 80001f6:	e005      	b.n	8000204 <BL_FeatchHostCommand+0xb8>
			case CBL_MEM_WRITE_CMD: Bootloader_Memory_Write(Host_buffer); break;
 80001f8:	4805      	ldr	r0, [pc, #20]	; (8000210 <BL_FeatchHostCommand+0xc4>)
 80001fa:	f000 f8e9 	bl	80003d0 <Bootloader_Memory_Write>
 80001fe:	e001      	b.n	8000204 <BL_FeatchHostCommand+0xb8>
			default: status = BL_NACK;
 8000200:	2300      	movs	r3, #0
 8000202:	71fb      	strb	r3, [r7, #7]
			}
		}
	}
	return status;
 8000204:	79fb      	ldrb	r3, [r7, #7]
}
 8000206:	4618      	mov	r0, r3
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	2000007c 	.word	0x2000007c
 8000214:	20000198 	.word	0x20000198
 8000218:	2000007d 	.word	0x2000007d
 800021c:	08002c1c 	.word	0x08002c1c

08000220 <BL_SendMessage>:

void BL_SendMessage(char *format,...)
{
 8000220:	b40f      	push	{r0, r1, r2, r3}
 8000222:	b580      	push	{r7, lr}
 8000224:	b09a      	sub	sp, #104	; 0x68
 8000226:	af00      	add	r7, sp, #0
	char message[100] = {0};
 8000228:	2300      	movs	r3, #0
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	f107 0308 	add.w	r3, r7, #8
 8000230:	2260      	movs	r2, #96	; 0x60
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f002 f853 	bl	80022e0 <memset>
	va_list args;
	va_start(args, format);
 800023a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800023e:	603b      	str	r3, [r7, #0]
	vsprintf(message, format, args);
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	683a      	ldr	r2, [r7, #0]
 8000244:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000246:	4618      	mov	r0, r3
 8000248:	f002 f840 	bl	80022cc <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)message, sizeof(message), HAL_MAX_DELAY);
 800024c:	1d39      	adds	r1, r7, #4
 800024e:	f04f 33ff 	mov.w	r3, #4294967295
 8000252:	2264      	movs	r2, #100	; 0x64
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <BL_SendMessage+0x48>)
 8000256:	f001 fdb7 	bl	8001dc8 <HAL_UART_Transmit>
	va_end(args);
}
 800025a:	bf00      	nop
 800025c:	3768      	adds	r7, #104	; 0x68
 800025e:	46bd      	mov	sp, r7
 8000260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr
 8000268:	20000198 	.word	0x20000198

0800026c <BL_Get_Version>:

static void BL_Get_Version(uint8_t *Host_buffer)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	uint8_t Version[4] = {CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};
 8000274:	4b16      	ldr	r3, [pc, #88]	; (80002d0 <BL_Get_Version+0x64>)
 8000276:	60fb      	str	r3, [r7, #12]
	uint16_t Host_Packet_Len = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_valu = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_buffer[0] + 1;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	b29b      	uxth	r3, r3
 8000286:	3301      	adds	r3, #1
 8000288:	82fb      	strh	r3, [r7, #22]
	CRC_valu = *(uint32_t *)(Host_buffer + Host_Packet_Len - 4);
 800028a:	8afb      	ldrh	r3, [r7, #22]
 800028c:	3b04      	subs	r3, #4
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	4413      	add	r3, r2
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFING_PASS == BL_CRC_verfiy((uint8_t *)&Host_buffer[0], Host_Packet_Len - 4, CRC_valu))
 8000296:	8afb      	ldrh	r3, [r7, #22]
 8000298:	3b04      	subs	r3, #4
 800029a:	693a      	ldr	r2, [r7, #16]
 800029c:	4619      	mov	r1, r3
 800029e:	6878      	ldr	r0, [r7, #4]
 80002a0:	f000 f8f6 	bl	8000490 <BL_CRC_verfiy>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d10b      	bne.n	80002c2 <BL_Get_Version+0x56>
	{
		BL_Send_ACK(4);
 80002aa:	2004      	movs	r0, #4
 80002ac:	f000 f92c 	bl	8000508 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2, (uint8_t *)Version, 4, HAL_MAX_DELAY);
 80002b0:	f107 010c 	add.w	r1, r7, #12
 80002b4:	f04f 33ff 	mov.w	r3, #4294967295
 80002b8:	2204      	movs	r2, #4
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <BL_Get_Version+0x68>)
 80002bc:	f001 fd84 	bl	8001dc8 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK();
	}
}
 80002c0:	e001      	b.n	80002c6 <BL_Get_Version+0x5a>
		BL_Send_NACK();
 80002c2:	f000 f93b 	bl	800053c <BL_Send_NACK>
}
 80002c6:	bf00      	nop
 80002c8:	3718      	adds	r7, #24
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	00010164 	.word	0x00010164
 80002d4:	20000198 	.word	0x20000198

080002d8 <BL_Get_Chip_Idendification_nNumber>:

static void BL_Get_Chip_Idendification_nNumber(uint8_t *Host_buffer)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	uint16_t MCU_Identification_Number = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	81fb      	strh	r3, [r7, #14]
	uint16_t Host_Packet_Len = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_valu = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_buffer[0] + 1;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	3301      	adds	r3, #1
 80002f4:	82fb      	strh	r3, [r7, #22]
	CRC_valu = *(uint32_t *)(Host_buffer + Host_Packet_Len - 4);
 80002f6:	8afb      	ldrh	r3, [r7, #22]
 80002f8:	3b04      	subs	r3, #4
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	4413      	add	r3, r2
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFING_PASS == BL_CRC_verfiy((uint8_t *)&Host_buffer[0], Host_Packet_Len - 4, CRC_valu))
 8000302:	8afb      	ldrh	r3, [r7, #22]
 8000304:	3b04      	subs	r3, #4
 8000306:	693a      	ldr	r2, [r7, #16]
 8000308:	4619      	mov	r1, r3
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f000 f8c0 	bl	8000490 <BL_CRC_verfiy>
 8000310:	4603      	mov	r3, r0
 8000312:	2b01      	cmp	r3, #1
 8000314:	d112      	bne.n	800033c <BL_Get_Chip_Idendification_nNumber+0x64>
	{
		MCU_Identification_Number = (uint16_t)(DBGMCU->IDCODE & 0x00000FFF);
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <BL_Get_Chip_Idendification_nNumber+0x70>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	b29b      	uxth	r3, r3
 800031c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000320:	b29b      	uxth	r3, r3
 8000322:	81fb      	strh	r3, [r7, #14]
		BL_Send_ACK(2);
 8000324:	2002      	movs	r0, #2
 8000326:	f000 f8ef 	bl	8000508 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2, (uint8_t *)&MCU_Identification_Number, 2, HAL_MAX_DELAY);
 800032a:	f107 010e 	add.w	r1, r7, #14
 800032e:	f04f 33ff 	mov.w	r3, #4294967295
 8000332:	2202      	movs	r2, #2
 8000334:	4805      	ldr	r0, [pc, #20]	; (800034c <BL_Get_Chip_Idendification_nNumber+0x74>)
 8000336:	f001 fd47 	bl	8001dc8 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK();
	}
}
 800033a:	e001      	b.n	8000340 <BL_Get_Chip_Idendification_nNumber+0x68>
		BL_Send_NACK();
 800033c:	f000 f8fe 	bl	800053c <BL_Send_NACK>
}
 8000340:	bf00      	nop
 8000342:	3718      	adds	r7, #24
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	e0042000 	.word	0xe0042000
 800034c:	20000198 	.word	0x20000198

08000350 <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash(uint8_t *Host_buffer)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	uint8_t Erase_status = UNSUCCESSFUL_ERASE;
 8000358:	2302      	movs	r3, #2
 800035a:	73fb      	strb	r3, [r7, #15]
	uint16_t Host_Packet_Len = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_valu = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
	Host_Packet_Len = Host_buffer[0] + 1;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	b29b      	uxth	r3, r3
 800036a:	3301      	adds	r3, #1
 800036c:	82fb      	strh	r3, [r7, #22]
	CRC_valu = *(uint32_t *)(Host_buffer + Host_Packet_Len - 4);
 800036e:	8afb      	ldrh	r3, [r7, #22]
 8000370:	3b04      	subs	r3, #4
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	4413      	add	r3, r2
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFING_PASS == BL_CRC_verfiy((uint8_t *)&Host_buffer[0], Host_Packet_Len - 4, CRC_valu))
 800037a:	8afb      	ldrh	r3, [r7, #22]
 800037c:	3b04      	subs	r3, #4
 800037e:	693a      	ldr	r2, [r7, #16]
 8000380:	4619      	mov	r1, r3
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f000 f884 	bl	8000490 <BL_CRC_verfiy>
 8000388:	4603      	mov	r3, r0
 800038a:	2b01      	cmp	r3, #1
 800038c:	d117      	bne.n	80003be <Bootloader_Erase_Flash+0x6e>
	{
		Erase_status = Perform_Flash_Erase(*((uint32_t *)&Host_buffer[2]), Host_buffer[6]);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3302      	adds	r3, #2
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3306      	adds	r3, #6
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	4619      	mov	r1, r3
 800039c:	4610      	mov	r0, r2
 800039e:	f000 f8df 	bl	8000560 <Perform_Flash_Erase>
 80003a2:	4603      	mov	r3, r0
 80003a4:	73fb      	strb	r3, [r7, #15]
		BL_Send_ACK(1);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 f8ae 	bl	8000508 <BL_Send_ACK>
		HAL_UART_Transmit(&huart2, (uint8_t *)&Erase_status, 1, HAL_MAX_DELAY);
 80003ac:	f107 010f 	add.w	r1, r7, #15
 80003b0:	f04f 33ff 	mov.w	r3, #4294967295
 80003b4:	2201      	movs	r2, #1
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <Bootloader_Erase_Flash+0x7c>)
 80003b8:	f001 fd06 	bl	8001dc8 <HAL_UART_Transmit>
	}
	else
	{
		BL_Send_NACK();
	}
}
 80003bc:	e001      	b.n	80003c2 <Bootloader_Erase_Flash+0x72>
		BL_Send_NACK();
 80003be:	f000 f8bd 	bl	800053c <BL_Send_NACK>
}
 80003c2:	bf00      	nop
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000198 	.word	0x20000198

080003d0 <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write(uint8_t *Host_buffer)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	uint8_t Adress_varfiy = ADDRESS_IS_INVALID;
 80003d8:	2300      	movs	r3, #0
 80003da:	72fb      	strb	r3, [r7, #11]
	uint32_t Address_Host = 0;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
	uint8_t DataLen = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	74fb      	strb	r3, [r7, #19]
	uint8_t payload_status = FLASH_PAYLOAD_WRITE_FAILED;
 80003e4:	2300      	movs	r3, #0
 80003e6:	72bb      	strb	r3, [r7, #10]
	uint16_t Host_Packet_Len = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	823b      	strh	r3, [r7, #16]
	uint32_t CRC_valu = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
	Host_Packet_Len = Host_buffer[0] + 1;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	3301      	adds	r3, #1
 80003f8:	823b      	strh	r3, [r7, #16]
	CRC_valu = *(uint32_t *)(Host_buffer + Host_Packet_Len - 4);
 80003fa:	8a3b      	ldrh	r3, [r7, #16]
 80003fc:	3b04      	subs	r3, #4
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	60fb      	str	r3, [r7, #12]
	//if (CRC_VERIFING_PASS == BL_CRC_verfiy((uint8_t *)&Host_buffer[0], Host_Packet_Len - 4, CRC_valu))
	//{
		//BL_Send_ACK(1);
		Address_Host = *((uint32_t *)&Host_buffer[2]);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800040c:	617b      	str	r3, [r7, #20]
		DataLen = Host_buffer[6];
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	799b      	ldrb	r3, [r3, #6]
 8000412:	74fb      	strb	r3, [r7, #19]
		Adress_varfiy = BL_Address_Varification(Address_Host);
 8000414:	6978      	ldr	r0, [r7, #20]
 8000416:	f000 f825 	bl	8000464 <BL_Address_Varification>
 800041a:	4603      	mov	r3, r0
 800041c:	72fb      	strb	r3, [r7, #11]
		if (Adress_varfiy == ADDRESS_IS_VALID)
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d111      	bne.n	8000448 <Bootloader_Memory_Write+0x78>
		{
			// flash
			payload_status = FlashMemory_Paylaod_Write((uint16_t *)&Host_buffer[7], Address_Host, DataLen);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3307      	adds	r3, #7
 8000428:	7cfa      	ldrb	r2, [r7, #19]
 800042a:	6979      	ldr	r1, [r7, #20]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f8e5 	bl	80005fc <FlashMemory_Paylaod_Write>
 8000432:	4603      	mov	r3, r0
 8000434:	72bb      	strb	r3, [r7, #10]
			HAL_UART_Transmit(&huart2, (uint8_t *)&payload_status, 1, HAL_MAX_DELAY);
 8000436:	f107 010a 	add.w	r1, r7, #10
 800043a:	f04f 33ff 	mov.w	r3, #4294967295
 800043e:	2201      	movs	r2, #1
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <Bootloader_Memory_Write+0x90>)
 8000442:	f001 fcc1 	bl	8001dc8 <HAL_UART_Transmit>
	//}
	//else
	//{
	//	BL_Send_NACK();
	//}
}
 8000446:	e007      	b.n	8000458 <Bootloader_Memory_Write+0x88>
			HAL_UART_Transmit(&huart2, (uint8_t *)&Adress_varfiy, 1, HAL_MAX_DELAY);
 8000448:	f107 010b 	add.w	r1, r7, #11
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
 8000450:	2201      	movs	r2, #1
 8000452:	4803      	ldr	r0, [pc, #12]	; (8000460 <Bootloader_Memory_Write+0x90>)
 8000454:	f001 fcb8 	bl	8001dc8 <HAL_UART_Transmit>
}
 8000458:	bf00      	nop
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000198 	.word	0x20000198

08000464 <BL_Address_Varification>:

uint8_t BL_Address_Varification(uint32_t address) {
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	// Assuming the flash address range for STM32F103C6T6 is 0x08000000 to 0x08007FFF
	if (address >= 0x08000000 && address <= 0x08007FFF) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000472:	d305      	bcc.n	8000480 <BL_Address_Varification+0x1c>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a05      	ldr	r2, [pc, #20]	; (800048c <BL_Address_Varification+0x28>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d201      	bcs.n	8000480 <BL_Address_Varification+0x1c>
		return ADDRESS_IS_VALID;
 800047c:	2301      	movs	r3, #1
 800047e:	e000      	b.n	8000482 <BL_Address_Varification+0x1e>
	}
	return ADDRESS_IS_INVALID;
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	08008000 	.word	0x08008000

08000490 <BL_CRC_verfiy>:
static uint32_t BL_CRC_verfiy(uint8_t *pdata, uint32_t DataLen, uint32_t HostCRC)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
	uint8_t crc_status = CRC_VERIFING_FAILED;
 800049c:	2300      	movs	r3, #0
 800049e:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
	uint32_t dataBuffer = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
	for (uint8_t count = 0; count < DataLen; count++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	75fb      	strb	r3, [r7, #23]
 80004ac:	e00f      	b.n	80004ce <BL_CRC_verfiy+0x3e>
	{
		dataBuffer = (uint32_t)pdata[count];
 80004ae:	7dfb      	ldrb	r3, [r7, #23]
 80004b0:	68fa      	ldr	r2, [r7, #12]
 80004b2:	4413      	add	r3, r2
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	613b      	str	r3, [r7, #16]
		MCU_CRC = HAL_CRC_Accumulate(&hcrc, &dataBuffer, 1);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	2201      	movs	r2, #1
 80004be:	4619      	mov	r1, r3
 80004c0:	4810      	ldr	r0, [pc, #64]	; (8000504 <BL_CRC_verfiy+0x74>)
 80004c2:	f000 fc7a 	bl	8000dba <HAL_CRC_Accumulate>
 80004c6:	61b8      	str	r0, [r7, #24]
	for (uint8_t count = 0; count < DataLen; count++)
 80004c8:	7dfb      	ldrb	r3, [r7, #23]
 80004ca:	3301      	adds	r3, #1
 80004cc:	75fb      	strb	r3, [r7, #23]
 80004ce:	7dfb      	ldrb	r3, [r7, #23]
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d8eb      	bhi.n	80004ae <BL_CRC_verfiy+0x1e>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <BL_CRC_verfiy+0x74>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	689a      	ldr	r2, [r3, #8]
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <BL_CRC_verfiy+0x74>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f042 0201 	orr.w	r2, r2, #1
 80004e4:	609a      	str	r2, [r3, #8]
	if (HostCRC == MCU_CRC)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d102      	bne.n	80004f4 <BL_CRC_verfiy+0x64>
	{
		crc_status = CRC_VERIFING_PASS;
 80004ee:	2301      	movs	r3, #1
 80004f0:	77fb      	strb	r3, [r7, #31]
 80004f2:	e001      	b.n	80004f8 <BL_CRC_verfiy+0x68>
	}
	else
	{
		crc_status = CRC_VERIFING_FAILED;
 80004f4:	2300      	movs	r3, #0
 80004f6:	77fb      	strb	r3, [r7, #31]
	}
	return crc_status;
 80004f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3720      	adds	r7, #32
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000144 	.word	0x20000144

08000508 <BL_Send_ACK>:

static void BL_Send_ACK(uint8_t dataLen)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	uint8_t ACK_value[2] = {0};
 8000512:	2300      	movs	r3, #0
 8000514:	81bb      	strh	r3, [r7, #12]
	ACK_value[0] = SEND_ACK;
 8000516:	23cd      	movs	r3, #205	; 0xcd
 8000518:	733b      	strb	r3, [r7, #12]
	ACK_value[1] = dataLen;
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart2, (uint8_t *)ACK_value, 2, HAL_MAX_DELAY);
 800051e:	f107 010c 	add.w	r1, r7, #12
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	2202      	movs	r2, #2
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <BL_Send_ACK+0x30>)
 800052a:	f001 fc4d 	bl	8001dc8 <HAL_UART_Transmit>
}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000198 	.word	0x20000198

0800053c <BL_Send_NACK>:

static void BL_Send_NACK()
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	uint8_t ACk_value = SEND_NACK;
 8000542:	23ab      	movs	r3, #171	; 0xab
 8000544:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &ACk_value, sizeof(ACk_value), HAL_MAX_DELAY);
 8000546:	1df9      	adds	r1, r7, #7
 8000548:	f04f 33ff 	mov.w	r3, #4294967295
 800054c:	2201      	movs	r2, #1
 800054e:	4803      	ldr	r0, [pc, #12]	; (800055c <BL_Send_NACK+0x20>)
 8000550:	f001 fc3a 	bl	8001dc8 <HAL_UART_Transmit>
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000198 	.word	0x20000198

08000560 <Perform_Flash_Erase>:

static uint8_t Perform_Flash_Erase(uint32_t PageAddress, uint8_t page_Number)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef Hal_status = HAL_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	77bb      	strb	r3, [r7, #30]
	uint32_t PageError = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
	uint8_t PageStatus = INVALID_PAGE_NUMBER;
 8000574:	2300      	movs	r3, #0
 8000576:	77fb      	strb	r3, [r7, #31]
	if (page_Number > CBL_FLASH_MAX_PAGE_NUMBER)
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	2b10      	cmp	r3, #16
 800057c:	d902      	bls.n	8000584 <Perform_Flash_Erase+0x24>
	{
		PageStatus = INVALID_PAGE_NUMBER;
 800057e:	2300      	movs	r3, #0
 8000580:	77fb      	strb	r3, [r7, #31]
 8000582:	e036      	b.n	80005f2 <Perform_Flash_Erase+0x92>
	}
	else
	{
		PageStatus = VALID_PAGE_NUMBER;
 8000584:	2301      	movs	r3, #1
 8000586:	77fb      	strb	r3, [r7, #31]
		if (page_Number <= (CBL_FLASH_MAX_PAGE_NUMBER - 1) || PageAddress == CBL_FLASH_MASS_ERASE)
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	2b0f      	cmp	r3, #15
 800058c:	d902      	bls.n	8000594 <Perform_Flash_Erase+0x34>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2bff      	cmp	r3, #255	; 0xff
 8000592:	d12c      	bne.n	80005ee <Perform_Flash_Erase+0x8e>
		{
			if (PageAddress == CBL_FLASH_MASS_ERASE)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2bff      	cmp	r3, #255	; 0xff
 8000598:	d109      	bne.n	80005ae <Perform_Flash_Erase+0x4e>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
				pEraseInit.Banks = FLASH_BANK_1;
 800059e:	2301      	movs	r3, #1
 80005a0:	613b      	str	r3, [r7, #16]
				pEraseInit.PageAddress = 0x08000000;
 80005a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005a6:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages = 16;
 80005a8:	2310      	movs	r3, #16
 80005aa:	61bb      	str	r3, [r7, #24]
 80005ac:	e007      	b.n	80005be <Perform_Flash_Erase+0x5e>
			}
			else
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
				pEraseInit.Banks = FLASH_BANK_1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	613b      	str	r3, [r7, #16]
				pEraseInit.PageAddress = PageAddress;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages = page_Number;
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	61bb      	str	r3, [r7, #24]
			}
			HAL_FLASH_Unlock();
 80005be:	f000 fc97 	bl	8000ef0 <HAL_FLASH_Unlock>
			Hal_status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80005c2:	f107 0208 	add.w	r2, r7, #8
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4611      	mov	r1, r2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fd77 	bl	80010c0 <HAL_FLASHEx_Erase>
 80005d2:	4603      	mov	r3, r0
 80005d4:	77bb      	strb	r3, [r7, #30]
			HAL_FLASH_Lock();
 80005d6:	f000 fcb1 	bl	8000f3c <HAL_FLASH_Lock>
			if (PageError == HAL_SUCCESSFUL_ERASE)
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e0:	d102      	bne.n	80005e8 <Perform_Flash_Erase+0x88>
			{
				PageStatus = SUCCESSFUL_ERASE;
 80005e2:	2303      	movs	r3, #3
 80005e4:	77fb      	strb	r3, [r7, #31]
			if (PageError == HAL_SUCCESSFUL_ERASE)
 80005e6:	e004      	b.n	80005f2 <Perform_Flash_Erase+0x92>
			}
			else
			{
				PageStatus = UNSUCCESSFUL_ERASE;
 80005e8:	2302      	movs	r3, #2
 80005ea:	77fb      	strb	r3, [r7, #31]
			if (PageError == HAL_SUCCESSFUL_ERASE)
 80005ec:	e001      	b.n	80005f2 <Perform_Flash_Erase+0x92>
			}
		}
		else
		{
			PageStatus = INVALID_PAGE_NUMBER;
 80005ee:	2300      	movs	r3, #0
 80005f0:	77fb      	strb	r3, [r7, #31]
		}
	}
	return PageStatus;
 80005f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3720      	adds	r7, #32
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <FlashMemory_Paylaod_Write>:

static uint8_t FlashMemory_Paylaod_Write(uint16_t *pdata, uint32_t StartAddress, uint8_t Payloadlen)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	4613      	mov	r3, r2
 8000608:	71fb      	strb	r3, [r7, #7]
	uint32_t Address = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
	//uint8_t UpdataAdress = 0;
	HAL_StatusTypeDef Hal_status = HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	75fb      	strb	r3, [r7, #23]
	uint8_t payload_status = FLASH_PAYLOAD_WRITE_FAILED;
 8000612:	2300      	movs	r3, #0
 8000614:	77fb      	strb	r3, [r7, #31]
	HAL_FLASH_Unlock();
 8000616:	f000 fc6b 	bl	8000ef0 <HAL_FLASH_Unlock>

	for (uint8_t payload_count = 0, UpdataAdress = 0; payload_count < Payloadlen / 2; payload_count++, UpdataAdress += 2)
 800061a:	2300      	movs	r3, #0
 800061c:	77bb      	strb	r3, [r7, #30]
 800061e:	2300      	movs	r3, #0
 8000620:	777b      	strb	r3, [r7, #29]
 8000622:	e022      	b.n	800066a <FlashMemory_Paylaod_Write+0x6e>
	{
		Address = StartAddress + UpdataAdress;
 8000624:	7f7b      	ldrb	r3, [r7, #29]
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	4413      	add	r3, r2
 800062a:	61bb      	str	r3, [r7, #24]
		Hal_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, pdata[payload_count]);
 800062c:	7fbb      	ldrb	r3, [r7, #30]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	4413      	add	r3, r2
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	2200      	movs	r2, #0
 800063a:	461c      	mov	r4, r3
 800063c:	4615      	mov	r5, r2
 800063e:	4622      	mov	r2, r4
 8000640:	462b      	mov	r3, r5
 8000642:	69b9      	ldr	r1, [r7, #24]
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fbe3 	bl	8000e10 <HAL_FLASH_Program>
 800064a:	4603      	mov	r3, r0
 800064c:	75fb      	strb	r3, [r7, #23]
		if (Hal_status != HAL_OK)
 800064e:	7dfb      	ldrb	r3, [r7, #23]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <FlashMemory_Paylaod_Write+0x5e>
		{
			payload_status = FLASH_PAYLOAD_WRITE_FAILED;
 8000654:	2300      	movs	r3, #0
 8000656:	77fb      	strb	r3, [r7, #31]
 8000658:	e001      	b.n	800065e <FlashMemory_Paylaod_Write+0x62>
		}
		else
		{
			payload_status = FLASH_PAYLOAD_WRITE_PASSED;
 800065a:	2301      	movs	r3, #1
 800065c:	77fb      	strb	r3, [r7, #31]
	for (uint8_t payload_count = 0, UpdataAdress = 0; payload_count < Payloadlen / 2; payload_count++, UpdataAdress += 2)
 800065e:	7fbb      	ldrb	r3, [r7, #30]
 8000660:	3301      	adds	r3, #1
 8000662:	77bb      	strb	r3, [r7, #30]
 8000664:	7f7b      	ldrb	r3, [r7, #29]
 8000666:	3302      	adds	r3, #2
 8000668:	777b      	strb	r3, [r7, #29]
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	085b      	lsrs	r3, r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	7fba      	ldrb	r2, [r7, #30]
 8000672:	429a      	cmp	r2, r3
 8000674:	d3d6      	bcc.n	8000624 <FlashMemory_Paylaod_Write+0x28>
		}
	}
	HAL_FLASH_Lock();
 8000676:	f000 fc61 	bl	8000f3c <HAL_FLASH_Lock>
	return payload_status;
 800067a:	7ffb      	ldrb	r3, [r7, #31]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bdb0      	pop	{r4, r5, r7, pc}

08000684 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_CRC_Init+0x20>)
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <MX_CRC_Init+0x24>)
 800068c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_CRC_Init+0x20>)
 8000690:	f000 fb77 	bl	8000d82 <HAL_CRC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800069a:	f000 f893 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000144 	.word	0x20000144
 80006a8:	40023000 	.word	0x40023000

080006ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <HAL_CRC_MspInit+0x34>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d10b      	bne.n	80006d6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_CRC_MspInit+0x38>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_CRC_MspInit+0x38>)
 80006c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_CRC_MspInit+0x38>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	40023000 	.word	0x40023000
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_GPIO_Init+0x40>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <MX_GPIO_Init+0x40>)
 80006f4:	f043 0320 	orr.w	r3, r3, #32
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_GPIO_Init+0x40>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f003 0320 	and.w	r3, r3, #32
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_GPIO_Init+0x40>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a07      	ldr	r2, [pc, #28]	; (8000728 <MX_GPIO_Init+0x40>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <MX_GPIO_Init+0x40>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	40021000 	.word	0x40021000

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f000 f9e2 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f80b 	bl	800074e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f7ff ffd6 	bl	80006e8 <MX_GPIO_Init>
  MX_CRC_Init();
 800073c:	f7ff ffa2 	bl	8000684 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000740:	f000 f8dc 	bl	80008fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000744:	f000 f904 	bl	8000950 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BL_FeatchHostCommand();
 8000748:	f7ff fd00 	bl	800014c <BL_FeatchHostCommand>
 800074c:	e7fc      	b.n	8000748 <main+0x1c>

0800074e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b090      	sub	sp, #64	; 0x40
 8000752:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000754:	f107 0318 	add.w	r3, r7, #24
 8000758:	2228      	movs	r2, #40	; 0x28
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fdbf 	bl	80022e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0318 	add.w	r3, r7, #24
 8000784:	4618      	mov	r0, r3
 8000786:	f000 febf 	bl	8001508 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000790:	f000 f818 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f92d 	bl	8001a0c <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007b8:	f000 f804 	bl	80007c4 <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3740      	adds	r7, #64	; 0x40
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_MspInit+0x5c>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <HAL_MspInit+0x5c>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6193      	str	r3, [r2, #24]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_MspInit+0x5c>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x5c>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	4a0e      	ldr	r2, [pc, #56]	; (800082c <HAL_MspInit+0x5c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	61d3      	str	r3, [r2, #28]
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_MspInit+0x5c>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_MspInit+0x60>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_MspInit+0x60>)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	40021000 	.word	0x40021000
 8000830:	40010000 	.word	0x40010000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087a:	f000 f983 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f001 fd1c 	bl	80022f0 <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20002800 	.word	0x20002800
 80008e4:	00000400 	.word	0x00000400
 80008e8:	2000014c 	.word	0x2000014c
 80008ec:	20000350 	.word	0x20000350

080008f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_USART1_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000934:	f001 f9f8 	bl	8001d28 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f7ff ff41 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000150 	.word	0x20000150
 800094c:	40013800 	.word	0x40013800

08000950 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_USART2_UART_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USART2_UART_Init+0x4c>)
 8000988:	f001 f9ce 	bl	8001d28 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000992:	f7ff ff17 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000198 	.word	0x20000198
 80009a0:	40004400 	.word	0x40004400

080009a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a37      	ldr	r2, [pc, #220]	; (8000a9c <HAL_UART_MspInit+0xf8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d132      	bne.n	8000a2a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c4:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a35      	ldr	r2, [pc, #212]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0318 	add.w	r3, r7, #24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <HAL_UART_MspInit+0x100>)
 8000a0a:	f000 fc01 	bl	8001210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <HAL_UART_MspInit+0x100>)
 8000a24:	f000 fbf4 	bl	8001210 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a28:	e034      	b.n	8000a94 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <HAL_UART_MspInit+0x104>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d12f      	bne.n	8000a94 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 8000a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3e:	61d3      	str	r3, [r2, #28]
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_UART_MspInit+0xfc>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a64:	2304      	movs	r3, #4
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	4619      	mov	r1, r3
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <HAL_UART_MspInit+0x100>)
 8000a78:	f000 fbca 	bl	8001210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <HAL_UART_MspInit+0x100>)
 8000a90:	f000 fbbe 	bl	8001210 <HAL_GPIO_Init>
}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	40004400 	.word	0x40004400

08000aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aac:	f7ff ff20 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480b      	ldr	r0, [pc, #44]	; (8000ae0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ab2:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ab4:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a09      	ldr	r2, [pc, #36]	; (8000aec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ac8:	4c09      	ldr	r4, [pc, #36]	; (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f001 fc11 	bl	80022fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ada:	f7ff fe27 	bl	800072c <main>
  bx lr
 8000ade:	4770      	bx	lr
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ae8:	08002c94 	.word	0x08002c94
  ldr r2, =_sbss
 8000aec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000af0:	20000350 	.word	0x20000350

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x28>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x28>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f907 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fe5c 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f911 	bl	8000d6a <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f8e7 	bl	8000d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000004 	.word	0x20000004

08000b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x1c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	200001e0 	.word	0x200001e0

08000ba8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b02      	ldr	r3, [pc, #8]	; (8000bb8 <HAL_GetTick+0x10>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	200001e0 	.word	0x200001e0

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db0a      	blt.n	8000c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	490c      	ldr	r1, [pc, #48]	; (8000c6c <__NVIC_SetPriority+0x4c>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	0112      	lsls	r2, r2, #4
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	440b      	add	r3, r1
 8000c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c48:	e00a      	b.n	8000c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <__NVIC_SetPriority+0x50>)
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	3b04      	subs	r3, #4
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	761a      	strb	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e100 	.word	0xe000e100
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b089      	sub	sp, #36	; 0x24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f1c3 0307 	rsb	r3, r3, #7
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	bf28      	it	cs
 8000c92:	2304      	movcs	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d902      	bls.n	8000ca4 <NVIC_EncodePriority+0x30>
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3b03      	subs	r3, #3
 8000ca2:	e000      	b.n	8000ca6 <NVIC_EncodePriority+0x32>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc6:	43d9      	mvns	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	4313      	orrs	r3, r2
         );
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3724      	adds	r7, #36	; 0x24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f7ff ff90 	bl	8000c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff49 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d44:	f7ff ff5e 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	6978      	ldr	r0, [r7, #20]
 8000d50:	f7ff ff90 	bl	8000c74 <NVIC_EncodePriority>
 8000d54:	4602      	mov	r2, r0
 8000d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff5f 	bl	8000c20 <__NVIC_SetPriority>
}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffb0 	bl	8000cd8 <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e00e      	b.n	8000db2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	795b      	ldrb	r3, [r3, #5]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d105      	bne.n	8000daa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff fc81 	bl	80006ac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b087      	sub	sp, #28
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2202      	movs	r2, #2
 8000dce:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00a      	b.n	8000dec <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	441a      	add	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6812      	ldr	r2, [r2, #0]
 8000de4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d3f0      	bcc.n	8000dd6 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000e02:	693b      	ldr	r3, [r7, #16]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
	...

08000e10 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <HAL_FLASH_Program+0xd8>)
 8000e2c:	7e1b      	ldrb	r3, [r3, #24]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d101      	bne.n	8000e36 <HAL_FLASH_Program+0x26>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e054      	b.n	8000ee0 <HAL_FLASH_Program+0xd0>
 8000e36:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <HAL_FLASH_Program+0xd8>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e40:	f000 f8a8 	bl	8000f94 <FLASH_WaitForLastOperation>
 8000e44:	4603      	mov	r3, r0
 8000e46:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000e48:	7dfb      	ldrb	r3, [r7, #23]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d144      	bne.n	8000ed8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d102      	bne.n	8000e5a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000e54:	2301      	movs	r3, #1
 8000e56:	757b      	strb	r3, [r7, #21]
 8000e58:	e007      	b.n	8000e6a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d102      	bne.n	8000e66 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000e60:	2302      	movs	r3, #2
 8000e62:	757b      	strb	r3, [r7, #21]
 8000e64:	e001      	b.n	8000e6a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000e66:	2304      	movs	r3, #4
 8000e68:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	75bb      	strb	r3, [r7, #22]
 8000e6e:	e02d      	b.n	8000ecc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000e70:	7dbb      	ldrb	r3, [r7, #22]
 8000e72:	005a      	lsls	r2, r3, #1
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	eb02 0c03 	add.w	ip, r2, r3
 8000e7a:	7dbb      	ldrb	r3, [r7, #22]
 8000e7c:	0119      	lsls	r1, r3, #4
 8000e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e82:	f1c1 0620 	rsb	r6, r1, #32
 8000e86:	f1a1 0020 	sub.w	r0, r1, #32
 8000e8a:	fa22 f401 	lsr.w	r4, r2, r1
 8000e8e:	fa03 f606 	lsl.w	r6, r3, r6
 8000e92:	4334      	orrs	r4, r6
 8000e94:	fa23 f000 	lsr.w	r0, r3, r0
 8000e98:	4304      	orrs	r4, r0
 8000e9a:	fa23 f501 	lsr.w	r5, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4660      	mov	r0, ip
 8000ea4:	f000 f85a 	bl	8000f5c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ea8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eac:	f000 f872 	bl	8000f94 <FLASH_WaitForLastOperation>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_FLASH_Program+0xdc>)
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <HAL_FLASH_Program+0xdc>)
 8000eba:	f023 0301 	bic.w	r3, r3, #1
 8000ebe:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d107      	bne.n	8000ed6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000ec6:	7dbb      	ldrb	r3, [r7, #22]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	75bb      	strb	r3, [r7, #22]
 8000ecc:	7dba      	ldrb	r2, [r7, #22]
 8000ece:	7d7b      	ldrb	r3, [r7, #21]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d3cd      	bcc.n	8000e70 <HAL_FLASH_Program+0x60>
 8000ed4:	e000      	b.n	8000ed8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000ed6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_FLASH_Program+0xd8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	761a      	strb	r2, [r3, #24]

  return status;
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee8:	200001e8 	.word	0x200001e8
 8000eec:	40022000 	.word	0x40022000

08000ef0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_FLASH_Unlock+0x40>)
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00d      	beq.n	8000f22 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_FLASH_Unlock+0x40>)
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_FLASH_Unlock+0x44>)
 8000f0a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_FLASH_Unlock+0x40>)
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_FLASH_Unlock+0x48>)
 8000f10:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <HAL_FLASH_Unlock+0x40>)
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40022000 	.word	0x40022000
 8000f34:	45670123 	.word	0x45670123
 8000f38:	cdef89ab 	.word	0xcdef89ab

08000f3c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_FLASH_Lock+0x1c>)
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_FLASH_Lock+0x1c>)
 8000f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40022000 	.word	0x40022000

08000f5c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <FLASH_Program_HalfWord+0x30>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <FLASH_Program_HalfWord+0x34>)
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <FLASH_Program_HalfWord+0x34>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	887a      	ldrh	r2, [r7, #2]
 8000f7e:	801a      	strh	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200001e8 	.word	0x200001e8
 8000f90:	40022000 	.word	0x40022000

08000f94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff fe04 	bl	8000ba8 <HAL_GetTick>
 8000fa0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fa2:	e010      	b.n	8000fc6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000faa:	d00c      	beq.n	8000fc6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <FLASH_WaitForLastOperation+0x2e>
 8000fb2:	f7ff fdf9 	bl	8000ba8 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d201      	bcs.n	8000fc6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e025      	b.n	8001012 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <FLASH_WaitForLastOperation+0x88>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1e8      	bne.n	8000fa4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <FLASH_WaitForLastOperation+0x88>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f003 0320 	and.w	r3, r3, #32
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <FLASH_WaitForLastOperation+0x88>)
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <FLASH_WaitForLastOperation+0x88>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10b      	bne.n	8001008 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <FLASH_WaitForLastOperation+0x88>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d105      	bne.n	8001008 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <FLASH_WaitForLastOperation+0x88>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001008:	f000 f80a 	bl	8001020 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40022000 	.word	0x40022000

08001020 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <FLASH_SetErrorCode+0x98>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	2b00      	cmp	r3, #0
 8001034:	d009      	beq.n	800104a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <FLASH_SetErrorCode+0x9c>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <FLASH_SetErrorCode+0x9c>)
 8001040:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f043 0310 	orr.w	r3, r3, #16
 8001048:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <FLASH_SetErrorCode+0x98>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	2b00      	cmp	r3, #0
 8001054:	d009      	beq.n	800106a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <FLASH_SetErrorCode+0x9c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <FLASH_SetErrorCode+0x9c>)
 8001060:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <FLASH_SetErrorCode+0x98>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <FLASH_SetErrorCode+0x9c>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <FLASH_SetErrorCode+0x9c>)
 8001080:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <FLASH_SetErrorCode+0x98>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <FLASH_SetErrorCode+0x98>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f240 1201 	movw	r2, #257	; 0x101
 8001094:	4293      	cmp	r3, r2
 8001096:	d106      	bne.n	80010a6 <FLASH_SetErrorCode+0x86>
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <FLASH_SetErrorCode+0x98>)
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <FLASH_SetErrorCode+0x98>)
 800109e:	f023 0301 	bic.w	r3, r3, #1
 80010a2:	61d3      	str	r3, [r2, #28]
}  
 80010a4:	e002      	b.n	80010ac <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <FLASH_SetErrorCode+0x98>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	60d3      	str	r3, [r2, #12]
}  
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40022000 	.word	0x40022000
 80010bc:	200001e8 	.word	0x200001e8

080010c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_FLASHEx_Erase+0xd0>)
 80010d4:	7e1b      	ldrb	r3, [r3, #24]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <HAL_FLASHEx_Erase+0x1e>
 80010da:	2302      	movs	r3, #2
 80010dc:	e053      	b.n	8001186 <HAL_FLASHEx_Erase+0xc6>
 80010de:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <HAL_FLASHEx_Erase+0xd0>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d116      	bne.n	800111a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010f0:	f7ff ff50 	bl	8000f94 <FLASH_WaitForLastOperation>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d141      	bne.n	800117e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f000 f84c 	bl	8001198 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001100:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001104:	f7ff ff46 	bl	8000f94 <FLASH_WaitForLastOperation>
 8001108:	4603      	mov	r3, r0
 800110a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <HAL_FLASHEx_Erase+0xd4>)
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	4a20      	ldr	r2, [pc, #128]	; (8001194 <HAL_FLASHEx_Erase+0xd4>)
 8001112:	f023 0304 	bic.w	r3, r3, #4
 8001116:	6113      	str	r3, [r2, #16]
 8001118:	e031      	b.n	800117e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800111a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800111e:	f7ff ff39 	bl	8000f94 <FLASH_WaitForLastOperation>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d12a      	bne.n	800117e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f04f 32ff 	mov.w	r2, #4294967295
 800112e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	e019      	b.n	800116c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f000 f849 	bl	80011d0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800113e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001142:	f7ff ff27 	bl	8000f94 <FLASH_WaitForLastOperation>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_FLASHEx_Erase+0xd4>)
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_FLASHEx_Erase+0xd4>)
 8001150:	f023 0302 	bic.w	r3, r3, #2
 8001154:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	601a      	str	r2, [r3, #0]
            break;
 8001162:	e00c      	b.n	800117e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800116a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	029a      	lsls	r2, r3, #10
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	4413      	add	r3, r2
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3dc      	bcc.n	8001138 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_FLASHEx_Erase+0xd0>)
 8001180:	2200      	movs	r2, #0
 8001182:	761a      	strb	r2, [r3, #24]

  return status;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001e8 	.word	0x200001e8
 8001194:	40022000 	.word	0x40022000

08001198 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <FLASH_MassErase+0x30>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <FLASH_MassErase+0x34>)
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <FLASH_MassErase+0x34>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <FLASH_MassErase+0x34>)
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <FLASH_MassErase+0x34>)
 80011b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011bc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	200001e8 	.word	0x200001e8
 80011cc:	40022000 	.word	0x40022000

080011d0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <FLASH_PageErase+0x38>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <FLASH_PageErase+0x3c>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <FLASH_PageErase+0x3c>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <FLASH_PageErase+0x3c>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <FLASH_PageErase+0x3c>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	4a05      	ldr	r2, [pc, #20]	; (800120c <FLASH_PageErase+0x3c>)
 80011f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200001e8 	.word	0x200001e8
 800120c:	40022000 	.word	0x40022000

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b08b      	sub	sp, #44	; 0x2c
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	e161      	b.n	80014e8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001224:	2201      	movs	r2, #1
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 8150 	bne.w	80014e2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	4a97      	ldr	r2, [pc, #604]	; (80014a4 <HAL_GPIO_Init+0x294>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d05e      	beq.n	800130a <HAL_GPIO_Init+0xfa>
 800124c:	4a95      	ldr	r2, [pc, #596]	; (80014a4 <HAL_GPIO_Init+0x294>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d875      	bhi.n	800133e <HAL_GPIO_Init+0x12e>
 8001252:	4a95      	ldr	r2, [pc, #596]	; (80014a8 <HAL_GPIO_Init+0x298>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d058      	beq.n	800130a <HAL_GPIO_Init+0xfa>
 8001258:	4a93      	ldr	r2, [pc, #588]	; (80014a8 <HAL_GPIO_Init+0x298>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d86f      	bhi.n	800133e <HAL_GPIO_Init+0x12e>
 800125e:	4a93      	ldr	r2, [pc, #588]	; (80014ac <HAL_GPIO_Init+0x29c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d052      	beq.n	800130a <HAL_GPIO_Init+0xfa>
 8001264:	4a91      	ldr	r2, [pc, #580]	; (80014ac <HAL_GPIO_Init+0x29c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d869      	bhi.n	800133e <HAL_GPIO_Init+0x12e>
 800126a:	4a91      	ldr	r2, [pc, #580]	; (80014b0 <HAL_GPIO_Init+0x2a0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d04c      	beq.n	800130a <HAL_GPIO_Init+0xfa>
 8001270:	4a8f      	ldr	r2, [pc, #572]	; (80014b0 <HAL_GPIO_Init+0x2a0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d863      	bhi.n	800133e <HAL_GPIO_Init+0x12e>
 8001276:	4a8f      	ldr	r2, [pc, #572]	; (80014b4 <HAL_GPIO_Init+0x2a4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d046      	beq.n	800130a <HAL_GPIO_Init+0xfa>
 800127c:	4a8d      	ldr	r2, [pc, #564]	; (80014b4 <HAL_GPIO_Init+0x2a4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d85d      	bhi.n	800133e <HAL_GPIO_Init+0x12e>
 8001282:	2b12      	cmp	r3, #18
 8001284:	d82a      	bhi.n	80012dc <HAL_GPIO_Init+0xcc>
 8001286:	2b12      	cmp	r3, #18
 8001288:	d859      	bhi.n	800133e <HAL_GPIO_Init+0x12e>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <HAL_GPIO_Init+0x80>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	0800130b 	.word	0x0800130b
 8001294:	080012e5 	.word	0x080012e5
 8001298:	080012f7 	.word	0x080012f7
 800129c:	08001339 	.word	0x08001339
 80012a0:	0800133f 	.word	0x0800133f
 80012a4:	0800133f 	.word	0x0800133f
 80012a8:	0800133f 	.word	0x0800133f
 80012ac:	0800133f 	.word	0x0800133f
 80012b0:	0800133f 	.word	0x0800133f
 80012b4:	0800133f 	.word	0x0800133f
 80012b8:	0800133f 	.word	0x0800133f
 80012bc:	0800133f 	.word	0x0800133f
 80012c0:	0800133f 	.word	0x0800133f
 80012c4:	0800133f 	.word	0x0800133f
 80012c8:	0800133f 	.word	0x0800133f
 80012cc:	0800133f 	.word	0x0800133f
 80012d0:	0800133f 	.word	0x0800133f
 80012d4:	080012ed 	.word	0x080012ed
 80012d8:	08001301 	.word	0x08001301
 80012dc:	4a76      	ldr	r2, [pc, #472]	; (80014b8 <HAL_GPIO_Init+0x2a8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012e2:	e02c      	b.n	800133e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	623b      	str	r3, [r7, #32]
          break;
 80012ea:	e029      	b.n	8001340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	3304      	adds	r3, #4
 80012f2:	623b      	str	r3, [r7, #32]
          break;
 80012f4:	e024      	b.n	8001340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	3308      	adds	r3, #8
 80012fc:	623b      	str	r3, [r7, #32]
          break;
 80012fe:	e01f      	b.n	8001340 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	330c      	adds	r3, #12
 8001306:	623b      	str	r3, [r7, #32]
          break;
 8001308:	e01a      	b.n	8001340 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001312:	2304      	movs	r3, #4
 8001314:	623b      	str	r3, [r7, #32]
          break;
 8001316:	e013      	b.n	8001340 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001320:	2308      	movs	r3, #8
 8001322:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	611a      	str	r2, [r3, #16]
          break;
 800132a:	e009      	b.n	8001340 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800132c:	2308      	movs	r3, #8
 800132e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	615a      	str	r2, [r3, #20]
          break;
 8001336:	e003      	b.n	8001340 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x130>
          break;
 800133e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2bff      	cmp	r3, #255	; 0xff
 8001344:	d801      	bhi.n	800134a <HAL_GPIO_Init+0x13a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	e001      	b.n	800134e <HAL_GPIO_Init+0x13e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3304      	adds	r3, #4
 800134e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2bff      	cmp	r3, #255	; 0xff
 8001354:	d802      	bhi.n	800135c <HAL_GPIO_Init+0x14c>
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	e002      	b.n	8001362 <HAL_GPIO_Init+0x152>
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	3b08      	subs	r3, #8
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	210f      	movs	r1, #15
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	fa01 f303 	lsl.w	r3, r1, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	401a      	ands	r2, r3
 8001374:	6a39      	ldr	r1, [r7, #32]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	431a      	orrs	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80a9 	beq.w	80014e2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001390:	4b4a      	ldr	r3, [pc, #296]	; (80014bc <HAL_GPIO_Init+0x2ac>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a49      	ldr	r2, [pc, #292]	; (80014bc <HAL_GPIO_Init+0x2ac>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b47      	ldr	r3, [pc, #284]	; (80014bc <HAL_GPIO_Init+0x2ac>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013a8:	4a45      	ldr	r2, [pc, #276]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3d      	ldr	r2, [pc, #244]	; (80014c4 <HAL_GPIO_Init+0x2b4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d00d      	beq.n	80013f0 <HAL_GPIO_Init+0x1e0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a3c      	ldr	r2, [pc, #240]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d007      	beq.n	80013ec <HAL_GPIO_Init+0x1dc>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3b      	ldr	r2, [pc, #236]	; (80014cc <HAL_GPIO_Init+0x2bc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d101      	bne.n	80013e8 <HAL_GPIO_Init+0x1d8>
 80013e4:	2302      	movs	r3, #2
 80013e6:	e004      	b.n	80013f2 <HAL_GPIO_Init+0x1e2>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_Init+0x1e2>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <HAL_GPIO_Init+0x1e2>
 80013f0:	2300      	movs	r3, #0
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	f002 0203 	and.w	r2, r2, #3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4093      	lsls	r3, r2
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001402:	492f      	ldr	r1, [pc, #188]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800141c:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	492b      	ldr	r1, [pc, #172]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	608b      	str	r3, [r1, #8]
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	43db      	mvns	r3, r3
 8001432:	4927      	ldr	r1, [pc, #156]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 8001434:	4013      	ands	r3, r2
 8001436:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d006      	beq.n	8001452 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	4921      	ldr	r1, [pc, #132]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	60cb      	str	r3, [r1, #12]
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	43db      	mvns	r3, r3
 800145a:	491d      	ldr	r1, [pc, #116]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 800145c:	4013      	ands	r3, r2
 800145e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4917      	ldr	r1, [pc, #92]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	43db      	mvns	r3, r3
 8001482:	4913      	ldr	r1, [pc, #76]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 8001484:	4013      	ands	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01f      	beq.n	80014d4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	490d      	ldr	r1, [pc, #52]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
 80014a0:	e01f      	b.n	80014e2 <HAL_GPIO_Init+0x2d2>
 80014a2:	bf00      	nop
 80014a4:	10320000 	.word	0x10320000
 80014a8:	10310000 	.word	0x10310000
 80014ac:	10220000 	.word	0x10220000
 80014b0:	10210000 	.word	0x10210000
 80014b4:	10120000 	.word	0x10120000
 80014b8:	10110000 	.word	0x10110000
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010000 	.word	0x40010000
 80014c4:	40010800 	.word	0x40010800
 80014c8:	40010c00 	.word	0x40010c00
 80014cc:	40011000 	.word	0x40011000
 80014d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_GPIO_Init+0x2f4>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	43db      	mvns	r3, r3
 80014dc:	4909      	ldr	r1, [pc, #36]	; (8001504 <HAL_GPIO_Init+0x2f4>)
 80014de:	4013      	ands	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	3301      	adds	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	fa22 f303 	lsr.w	r3, r2, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f47f ae96 	bne.w	8001224 <HAL_GPIO_Init+0x14>
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	372c      	adds	r7, #44	; 0x2c
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e272      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8087 	beq.w	8001636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001528:	4b92      	ldr	r3, [pc, #584]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b04      	cmp	r3, #4
 8001532:	d00c      	beq.n	800154e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001534:	4b8f      	ldr	r3, [pc, #572]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d112      	bne.n	8001566 <HAL_RCC_OscConfig+0x5e>
 8001540:	4b8c      	ldr	r3, [pc, #560]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d10b      	bne.n	8001566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154e:	4b89      	ldr	r3, [pc, #548]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d06c      	beq.n	8001634 <HAL_RCC_OscConfig+0x12c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d168      	bne.n	8001634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e24c      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x76>
 8001570:	4b80      	ldr	r3, [pc, #512]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a7f      	ldr	r2, [pc, #508]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e02e      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b7b      	ldr	r3, [pc, #492]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a7a      	ldr	r2, [pc, #488]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b78      	ldr	r3, [pc, #480]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a77      	ldr	r2, [pc, #476]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0xbc>
 80015aa:	4b72      	ldr	r3, [pc, #456]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a71      	ldr	r2, [pc, #452]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6e      	ldr	r2, [pc, #440]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 80015c4:	4b6b      	ldr	r3, [pc, #428]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6a      	ldr	r2, [pc, #424]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a67      	ldr	r2, [pc, #412]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fae0 	bl	8000ba8 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fadc 	bl	8000ba8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e200      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b5d      	ldr	r3, [pc, #372]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xe4>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff facc 	bl	8000ba8 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fac8 	bl	8000ba8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1ec      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x10c>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d063      	beq.n	800170a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001642:	4b4c      	ldr	r3, [pc, #304]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164e:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b08      	cmp	r3, #8
 8001658:	d11c      	bne.n	8001694 <HAL_RCC_OscConfig+0x18c>
 800165a:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d116      	bne.n	8001694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	4b43      	ldr	r3, [pc, #268]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e1c0      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4939      	ldr	r1, [pc, #228]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	e03a      	b.n	800170a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fa81 	bl	8000ba8 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fa7d 	bl	8000ba8 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e1a1      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4927      	ldr	r1, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x270>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fa60 	bl	8000ba8 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fa5c 	bl	8000ba8 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e180      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d03a      	beq.n	800178c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d019      	beq.n	8001752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_RCC_OscConfig+0x274>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff fa40 	bl	8000ba8 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fa3c 	bl	8000ba8 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e160      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f000 face 	bl	8001cec <RCC_Delay>
 8001750:	e01c      	b.n	800178c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_RCC_OscConfig+0x274>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fa26 	bl	8000ba8 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175e:	e00f      	b.n	8001780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fa22 	bl	8000ba8 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d908      	bls.n	8001780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e146      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	42420000 	.word	0x42420000
 800177c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001780:	4b92      	ldr	r3, [pc, #584]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e9      	bne.n	8001760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a6 	beq.w	80018e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b8b      	ldr	r3, [pc, #556]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b88      	ldr	r3, [pc, #544]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a87      	ldr	r2, [pc, #540]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b85      	ldr	r3, [pc, #532]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	4b82      	ldr	r3, [pc, #520]	; (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7e      	ldr	r2, [pc, #504]	; (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017de:	f7ff f9e3 	bl	8000ba8 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff f9df 	bl	8000ba8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	; 0x64
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e103      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b75      	ldr	r3, [pc, #468]	; (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x312>
 800180c:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a6e      	ldr	r2, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	e02d      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x334>
 8001822:	4b6a      	ldr	r3, [pc, #424]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a69      	ldr	r2, [pc, #420]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a66      	ldr	r2, [pc, #408]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	e01c      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0x356>
 8001844:	4b61      	ldr	r3, [pc, #388]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a60      	ldr	r2, [pc, #384]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	4b5e      	ldr	r3, [pc, #376]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a5d      	ldr	r2, [pc, #372]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800185e:	4b5b      	ldr	r3, [pc, #364]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a5a      	ldr	r2, [pc, #360]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	4b58      	ldr	r3, [pc, #352]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a57      	ldr	r2, [pc, #348]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001870:	f023 0304 	bic.w	r3, r3, #4
 8001874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d015      	beq.n	80018aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff f993 	bl	8000ba8 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff f98f 	bl	8000ba8 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0b1      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ee      	beq.n	8001886 <HAL_RCC_OscConfig+0x37e>
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff f97d 	bl	8000ba8 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff f979 	bl	8000ba8 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e09b      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	4b40      	ldr	r3, [pc, #256]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ee      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a3b      	ldr	r2, [pc, #236]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8087 	beq.w	80019fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f0:	4b36      	ldr	r3, [pc, #216]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d061      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d146      	bne.n	8001992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001904:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <HAL_RCC_OscConfig+0x4cc>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff f94d 	bl	8000ba8 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff f949 	bl	8000ba8 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e06d      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	4b29      	ldr	r3, [pc, #164]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d108      	bne.n	800194c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4921      	ldr	r1, [pc, #132]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a19      	ldr	r1, [r3, #32]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	430b      	orrs	r3, r1
 800195e:	491b      	ldr	r1, [pc, #108]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_RCC_OscConfig+0x4cc>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff f91d 	bl	8000ba8 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff f919 	bl	8000ba8 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e03d      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x46a>
 8001990:	e035      	b.n	80019fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_RCC_OscConfig+0x4cc>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff f906 	bl	8000ba8 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f902 	bl	8000ba8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e026      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x498>
 80019be:	e01e      	b.n	80019fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e019      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40007000 	.word	0x40007000
 80019d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_OscConfig+0x500>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0d0      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4965      	ldr	r1, [pc, #404]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0b8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	494d      	ldr	r1, [pc, #308]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d040      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d115      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e07f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e073      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e06b      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4936      	ldr	r1, [pc, #216]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001afc:	f7ff f854 	bl	8000ba8 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff f850 	bl	8000ba8 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e053      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d210      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4922      	ldr	r1, [pc, #136]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e032      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b9a:	f000 f821 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	490a      	ldr	r1, [pc, #40]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	5ccb      	ldrb	r3, [r1, r3]
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1d0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe ffb2 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08002c2c 	.word	0x08002c2c
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x30>
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x36>
 8001c0e:	e027      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c12:	613b      	str	r3, [r7, #16]
      break;
 8001c14:	e027      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	0c9b      	lsrs	r3, r3, #18
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d010      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0c5b      	lsrs	r3, r3, #17
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c42:	fb03 f202 	mul.w	r2, r3, r2
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e004      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	613b      	str	r3, [r7, #16]
      break;
 8001c5e:	e002      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c62:	613b      	str	r3, [r7, #16]
      break;
 8001c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c66:	693b      	ldr	r3, [r7, #16]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	007a1200 	.word	0x007a1200
 8001c7c:	08002c44 	.word	0x08002c44
 8001c80:	08002c54 	.word	0x08002c54
 8001c84:	003d0900 	.word	0x003d0900

08001c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c8c:	4b02      	ldr	r3, [pc, #8]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	20000000 	.word	0x20000000

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ca0:	f7ff fff2 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4903      	ldr	r1, [pc, #12]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	08002c3c 	.word	0x08002c3c

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0adb      	lsrs	r3, r3, #11
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08002c3c 	.word	0x08002c3c

08001cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <RCC_Delay+0x34>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <RCC_Delay+0x38>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0a5b      	lsrs	r3, r3, #9
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d08:	bf00      	nop
  }
  while (Delay --);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1e5a      	subs	r2, r3, #1
 8001d0e:	60fa      	str	r2, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f9      	bne.n	8001d08 <RCC_Delay+0x1c>
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	20000000 	.word	0x20000000
 8001d24:	10624dd3 	.word	0x10624dd3

08001d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e042      	b.n	8001dc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fe28 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2224      	movs	r2, #36	; 0x24
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fa09 	bl	8002184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d175      	bne.n	8001ed4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_UART_Transmit+0x2c>
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e06e      	b.n	8001ed6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2221      	movs	r2, #33	; 0x21
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e06:	f7fe fecf 	bl	8000ba8 <HAL_GetTick>
 8001e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	88fa      	ldrh	r2, [r7, #6]
 8001e10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	88fa      	ldrh	r2, [r7, #6]
 8001e16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e20:	d108      	bne.n	8001e34 <HAL_UART_Transmit+0x6c>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d104      	bne.n	8001e34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	e003      	b.n	8001e3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e3c:	e02e      	b.n	8001e9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2200      	movs	r2, #0
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f8df 	bl	800200c <UART_WaitOnFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e03a      	b.n	8001ed6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	3302      	adds	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	e007      	b.n	8001e8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	781a      	ldrb	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1cb      	bne.n	8001e3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2200      	movs	r2, #0
 8001eae:	2140      	movs	r1, #64	; 0x40
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f8ab 	bl	800200c <UART_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e006      	b.n	8001ed6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e000      	b.n	8001ed6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ed4:	2302      	movs	r3, #2
  }
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b08a      	sub	sp, #40	; 0x28
 8001ee2:	af02      	add	r7, sp, #8
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	f040 8081 	bne.w	8002002 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_UART_Receive+0x2e>
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e079      	b.n	8002004 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2222      	movs	r2, #34	; 0x22
 8001f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f24:	f7fe fe40 	bl	8000ba8 <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	88fa      	ldrh	r2, [r7, #6]
 8001f2e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	88fa      	ldrh	r2, [r7, #6]
 8001f34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3e:	d108      	bne.n	8001f52 <HAL_UART_Receive+0x74>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
 8001f50:	e003      	b.n	8001f5a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f5a:	e047      	b.n	8001fec <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2200      	movs	r2, #0
 8001f64:	2120      	movs	r1, #32
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f850 	bl	800200c <UART_WaitOnFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e042      	b.n	8002004 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10c      	bne.n	8001f9e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	3302      	adds	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	e01f      	b.n	8001fde <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa6:	d007      	beq.n	8001fb8 <HAL_UART_Receive+0xda>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_UART_Receive+0xe8>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d106      	bne.n	8001fc6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e008      	b.n	8001fd8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1b2      	bne.n	8001f5c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e000      	b.n	8002004 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002002:	2302      	movs	r3, #2
  }
}
 8002004:	4618      	mov	r0, r3
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	4613      	mov	r3, r2
 800201a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800201c:	e03b      	b.n	8002096 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d037      	beq.n	8002096 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002026:	f7fe fdbf 	bl	8000ba8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	6a3a      	ldr	r2, [r7, #32]
 8002032:	429a      	cmp	r2, r3
 8002034:	d302      	bcc.n	800203c <UART_WaitOnFlagUntilTimeout+0x30>
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e03a      	b.n	80020b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d023      	beq.n	8002096 <UART_WaitOnFlagUntilTimeout+0x8a>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	d020      	beq.n	8002096 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b40      	cmp	r3, #64	; 0x40
 8002058:	d01d      	beq.n	8002096 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b08      	cmp	r3, #8
 8002066:	d116      	bne.n	8002096 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 f81d 	bl	80020be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2208      	movs	r2, #8
 8002088:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4013      	ands	r3, r2
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d0b4      	beq.n	800201e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020be:	b480      	push	{r7}
 80020c0:	b095      	sub	sp, #84	; 0x54
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	330c      	adds	r3, #12
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	e853 3f00 	ldrex	r3, [r3]
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80020dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	330c      	adds	r3, #12
 80020e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020e6:	643a      	str	r2, [r7, #64]	; 0x40
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020ee:	e841 2300 	strex	r3, r2, [r1]
 80020f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80020f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1e5      	bne.n	80020c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3314      	adds	r3, #20
 8002100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	e853 3f00 	ldrex	r3, [r3]
 8002108:	61fb      	str	r3, [r7, #28]
   return(result);
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	64bb      	str	r3, [r7, #72]	; 0x48
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3314      	adds	r3, #20
 8002118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800211a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002122:	e841 2300 	strex	r3, r2, [r1]
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1e5      	bne.n	80020fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	2b01      	cmp	r3, #1
 8002134:	d119      	bne.n	800216a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	330c      	adds	r3, #12
 800213c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	e853 3f00 	ldrex	r3, [r3]
 8002144:	60bb      	str	r3, [r7, #8]
   return(result);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f023 0310 	bic.w	r3, r3, #16
 800214c:	647b      	str	r3, [r7, #68]	; 0x44
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	330c      	adds	r3, #12
 8002154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002156:	61ba      	str	r2, [r7, #24]
 8002158:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215a:	6979      	ldr	r1, [r7, #20]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	e841 2300 	strex	r3, r2, [r1]
 8002162:	613b      	str	r3, [r7, #16]
   return(result);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e5      	bne.n	8002136 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002178:	bf00      	nop
 800217a:	3754      	adds	r7, #84	; 0x54
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
	...

08002184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80021be:	f023 030c 	bic.w	r3, r3, #12
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <UART_SetConfig+0x114>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d103      	bne.n	80021f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021ec:	f7ff fd6a 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	e002      	b.n	80021fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021f4:	f7ff fd52 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 80021f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	009a      	lsls	r2, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	4a22      	ldr	r2, [pc, #136]	; (800229c <UART_SetConfig+0x118>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	0119      	lsls	r1, r3, #4
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	009a      	lsls	r2, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <UART_SetConfig+0x118>)
 8002232:	fba3 0302 	umull	r0, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	fb00 f303 	mul.w	r3, r0, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	3332      	adds	r3, #50	; 0x32
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <UART_SetConfig+0x118>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002250:	4419      	add	r1, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	009a      	lsls	r2, r3, #2
 800225c:	441a      	add	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fbb2 f2f3 	udiv	r2, r2, r3
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <UART_SetConfig+0x118>)
 800226a:	fba3 0302 	umull	r0, r3, r3, r2
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2064      	movs	r0, #100	; 0x64
 8002272:	fb00 f303 	mul.w	r3, r0, r3
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	3332      	adds	r3, #50	; 0x32
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <UART_SetConfig+0x118>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	f003 020f 	and.w	r2, r3, #15
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	440a      	add	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40013800 	.word	0x40013800
 800229c:	51eb851f 	.word	0x51eb851f

080022a0 <_vsiprintf_r>:
 80022a0:	b500      	push	{lr}
 80022a2:	b09b      	sub	sp, #108	; 0x6c
 80022a4:	9100      	str	r1, [sp, #0]
 80022a6:	9104      	str	r1, [sp, #16]
 80022a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022ac:	9105      	str	r1, [sp, #20]
 80022ae:	9102      	str	r1, [sp, #8]
 80022b0:	4905      	ldr	r1, [pc, #20]	; (80022c8 <_vsiprintf_r+0x28>)
 80022b2:	9103      	str	r1, [sp, #12]
 80022b4:	4669      	mov	r1, sp
 80022b6:	f000 f995 	bl	80025e4 <_svfiprintf_r>
 80022ba:	2200      	movs	r2, #0
 80022bc:	9b00      	ldr	r3, [sp, #0]
 80022be:	701a      	strb	r2, [r3, #0]
 80022c0:	b01b      	add	sp, #108	; 0x6c
 80022c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80022c6:	bf00      	nop
 80022c8:	ffff0208 	.word	0xffff0208

080022cc <vsiprintf>:
 80022cc:	4613      	mov	r3, r2
 80022ce:	460a      	mov	r2, r1
 80022d0:	4601      	mov	r1, r0
 80022d2:	4802      	ldr	r0, [pc, #8]	; (80022dc <vsiprintf+0x10>)
 80022d4:	6800      	ldr	r0, [r0, #0]
 80022d6:	f7ff bfe3 	b.w	80022a0 <_vsiprintf_r>
 80022da:	bf00      	nop
 80022dc:	20000058 	.word	0x20000058

080022e0 <memset>:
 80022e0:	4603      	mov	r3, r0
 80022e2:	4402      	add	r2, r0
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d100      	bne.n	80022ea <memset+0xa>
 80022e8:	4770      	bx	lr
 80022ea:	f803 1b01 	strb.w	r1, [r3], #1
 80022ee:	e7f9      	b.n	80022e4 <memset+0x4>

080022f0 <__errno>:
 80022f0:	4b01      	ldr	r3, [pc, #4]	; (80022f8 <__errno+0x8>)
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000058 	.word	0x20000058

080022fc <__libc_init_array>:
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	2600      	movs	r6, #0
 8002300:	4d0c      	ldr	r5, [pc, #48]	; (8002334 <__libc_init_array+0x38>)
 8002302:	4c0d      	ldr	r4, [pc, #52]	; (8002338 <__libc_init_array+0x3c>)
 8002304:	1b64      	subs	r4, r4, r5
 8002306:	10a4      	asrs	r4, r4, #2
 8002308:	42a6      	cmp	r6, r4
 800230a:	d109      	bne.n	8002320 <__libc_init_array+0x24>
 800230c:	f000 fc7a 	bl	8002c04 <_init>
 8002310:	2600      	movs	r6, #0
 8002312:	4d0a      	ldr	r5, [pc, #40]	; (800233c <__libc_init_array+0x40>)
 8002314:	4c0a      	ldr	r4, [pc, #40]	; (8002340 <__libc_init_array+0x44>)
 8002316:	1b64      	subs	r4, r4, r5
 8002318:	10a4      	asrs	r4, r4, #2
 800231a:	42a6      	cmp	r6, r4
 800231c:	d105      	bne.n	800232a <__libc_init_array+0x2e>
 800231e:	bd70      	pop	{r4, r5, r6, pc}
 8002320:	f855 3b04 	ldr.w	r3, [r5], #4
 8002324:	4798      	blx	r3
 8002326:	3601      	adds	r6, #1
 8002328:	e7ee      	b.n	8002308 <__libc_init_array+0xc>
 800232a:	f855 3b04 	ldr.w	r3, [r5], #4
 800232e:	4798      	blx	r3
 8002330:	3601      	adds	r6, #1
 8002332:	e7f2      	b.n	800231a <__libc_init_array+0x1e>
 8002334:	08002c8c 	.word	0x08002c8c
 8002338:	08002c8c 	.word	0x08002c8c
 800233c:	08002c8c 	.word	0x08002c8c
 8002340:	08002c90 	.word	0x08002c90

08002344 <__retarget_lock_acquire_recursive>:
 8002344:	4770      	bx	lr

08002346 <__retarget_lock_release_recursive>:
 8002346:	4770      	bx	lr

08002348 <_free_r>:
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4605      	mov	r5, r0
 800234c:	2900      	cmp	r1, #0
 800234e:	d040      	beq.n	80023d2 <_free_r+0x8a>
 8002350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002354:	1f0c      	subs	r4, r1, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	bfb8      	it	lt
 800235a:	18e4      	addlt	r4, r4, r3
 800235c:	f000 f8dc 	bl	8002518 <__malloc_lock>
 8002360:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <_free_r+0x8c>)
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	b933      	cbnz	r3, 8002374 <_free_r+0x2c>
 8002366:	6063      	str	r3, [r4, #4]
 8002368:	6014      	str	r4, [r2, #0]
 800236a:	4628      	mov	r0, r5
 800236c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002370:	f000 b8d8 	b.w	8002524 <__malloc_unlock>
 8002374:	42a3      	cmp	r3, r4
 8002376:	d908      	bls.n	800238a <_free_r+0x42>
 8002378:	6820      	ldr	r0, [r4, #0]
 800237a:	1821      	adds	r1, r4, r0
 800237c:	428b      	cmp	r3, r1
 800237e:	bf01      	itttt	eq
 8002380:	6819      	ldreq	r1, [r3, #0]
 8002382:	685b      	ldreq	r3, [r3, #4]
 8002384:	1809      	addeq	r1, r1, r0
 8002386:	6021      	streq	r1, [r4, #0]
 8002388:	e7ed      	b.n	8002366 <_free_r+0x1e>
 800238a:	461a      	mov	r2, r3
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	b10b      	cbz	r3, 8002394 <_free_r+0x4c>
 8002390:	42a3      	cmp	r3, r4
 8002392:	d9fa      	bls.n	800238a <_free_r+0x42>
 8002394:	6811      	ldr	r1, [r2, #0]
 8002396:	1850      	adds	r0, r2, r1
 8002398:	42a0      	cmp	r0, r4
 800239a:	d10b      	bne.n	80023b4 <_free_r+0x6c>
 800239c:	6820      	ldr	r0, [r4, #0]
 800239e:	4401      	add	r1, r0
 80023a0:	1850      	adds	r0, r2, r1
 80023a2:	4283      	cmp	r3, r0
 80023a4:	6011      	str	r1, [r2, #0]
 80023a6:	d1e0      	bne.n	800236a <_free_r+0x22>
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4408      	add	r0, r1
 80023ae:	6010      	str	r0, [r2, #0]
 80023b0:	6053      	str	r3, [r2, #4]
 80023b2:	e7da      	b.n	800236a <_free_r+0x22>
 80023b4:	d902      	bls.n	80023bc <_free_r+0x74>
 80023b6:	230c      	movs	r3, #12
 80023b8:	602b      	str	r3, [r5, #0]
 80023ba:	e7d6      	b.n	800236a <_free_r+0x22>
 80023bc:	6820      	ldr	r0, [r4, #0]
 80023be:	1821      	adds	r1, r4, r0
 80023c0:	428b      	cmp	r3, r1
 80023c2:	bf01      	itttt	eq
 80023c4:	6819      	ldreq	r1, [r3, #0]
 80023c6:	685b      	ldreq	r3, [r3, #4]
 80023c8:	1809      	addeq	r1, r1, r0
 80023ca:	6021      	streq	r1, [r4, #0]
 80023cc:	6063      	str	r3, [r4, #4]
 80023ce:	6054      	str	r4, [r2, #4]
 80023d0:	e7cb      	b.n	800236a <_free_r+0x22>
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
 80023d4:	20000348 	.word	0x20000348

080023d8 <sbrk_aligned>:
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	4e0e      	ldr	r6, [pc, #56]	; (8002414 <sbrk_aligned+0x3c>)
 80023dc:	460c      	mov	r4, r1
 80023de:	6831      	ldr	r1, [r6, #0]
 80023e0:	4605      	mov	r5, r0
 80023e2:	b911      	cbnz	r1, 80023ea <sbrk_aligned+0x12>
 80023e4:	f000 fbaa 	bl	8002b3c <_sbrk_r>
 80023e8:	6030      	str	r0, [r6, #0]
 80023ea:	4621      	mov	r1, r4
 80023ec:	4628      	mov	r0, r5
 80023ee:	f000 fba5 	bl	8002b3c <_sbrk_r>
 80023f2:	1c43      	adds	r3, r0, #1
 80023f4:	d00a      	beq.n	800240c <sbrk_aligned+0x34>
 80023f6:	1cc4      	adds	r4, r0, #3
 80023f8:	f024 0403 	bic.w	r4, r4, #3
 80023fc:	42a0      	cmp	r0, r4
 80023fe:	d007      	beq.n	8002410 <sbrk_aligned+0x38>
 8002400:	1a21      	subs	r1, r4, r0
 8002402:	4628      	mov	r0, r5
 8002404:	f000 fb9a 	bl	8002b3c <_sbrk_r>
 8002408:	3001      	adds	r0, #1
 800240a:	d101      	bne.n	8002410 <sbrk_aligned+0x38>
 800240c:	f04f 34ff 	mov.w	r4, #4294967295
 8002410:	4620      	mov	r0, r4
 8002412:	bd70      	pop	{r4, r5, r6, pc}
 8002414:	2000034c 	.word	0x2000034c

08002418 <_malloc_r>:
 8002418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800241c:	1ccd      	adds	r5, r1, #3
 800241e:	f025 0503 	bic.w	r5, r5, #3
 8002422:	3508      	adds	r5, #8
 8002424:	2d0c      	cmp	r5, #12
 8002426:	bf38      	it	cc
 8002428:	250c      	movcc	r5, #12
 800242a:	2d00      	cmp	r5, #0
 800242c:	4607      	mov	r7, r0
 800242e:	db01      	blt.n	8002434 <_malloc_r+0x1c>
 8002430:	42a9      	cmp	r1, r5
 8002432:	d905      	bls.n	8002440 <_malloc_r+0x28>
 8002434:	230c      	movs	r3, #12
 8002436:	2600      	movs	r6, #0
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	4630      	mov	r0, r6
 800243c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002440:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002514 <_malloc_r+0xfc>
 8002444:	f000 f868 	bl	8002518 <__malloc_lock>
 8002448:	f8d8 3000 	ldr.w	r3, [r8]
 800244c:	461c      	mov	r4, r3
 800244e:	bb5c      	cbnz	r4, 80024a8 <_malloc_r+0x90>
 8002450:	4629      	mov	r1, r5
 8002452:	4638      	mov	r0, r7
 8002454:	f7ff ffc0 	bl	80023d8 <sbrk_aligned>
 8002458:	1c43      	adds	r3, r0, #1
 800245a:	4604      	mov	r4, r0
 800245c:	d155      	bne.n	800250a <_malloc_r+0xf2>
 800245e:	f8d8 4000 	ldr.w	r4, [r8]
 8002462:	4626      	mov	r6, r4
 8002464:	2e00      	cmp	r6, #0
 8002466:	d145      	bne.n	80024f4 <_malloc_r+0xdc>
 8002468:	2c00      	cmp	r4, #0
 800246a:	d048      	beq.n	80024fe <_malloc_r+0xe6>
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	4631      	mov	r1, r6
 8002470:	4638      	mov	r0, r7
 8002472:	eb04 0903 	add.w	r9, r4, r3
 8002476:	f000 fb61 	bl	8002b3c <_sbrk_r>
 800247a:	4581      	cmp	r9, r0
 800247c:	d13f      	bne.n	80024fe <_malloc_r+0xe6>
 800247e:	6821      	ldr	r1, [r4, #0]
 8002480:	4638      	mov	r0, r7
 8002482:	1a6d      	subs	r5, r5, r1
 8002484:	4629      	mov	r1, r5
 8002486:	f7ff ffa7 	bl	80023d8 <sbrk_aligned>
 800248a:	3001      	adds	r0, #1
 800248c:	d037      	beq.n	80024fe <_malloc_r+0xe6>
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	442b      	add	r3, r5
 8002492:	6023      	str	r3, [r4, #0]
 8002494:	f8d8 3000 	ldr.w	r3, [r8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d038      	beq.n	800250e <_malloc_r+0xf6>
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	42a2      	cmp	r2, r4
 80024a0:	d12b      	bne.n	80024fa <_malloc_r+0xe2>
 80024a2:	2200      	movs	r2, #0
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	e00f      	b.n	80024c8 <_malloc_r+0xb0>
 80024a8:	6822      	ldr	r2, [r4, #0]
 80024aa:	1b52      	subs	r2, r2, r5
 80024ac:	d41f      	bmi.n	80024ee <_malloc_r+0xd6>
 80024ae:	2a0b      	cmp	r2, #11
 80024b0:	d917      	bls.n	80024e2 <_malloc_r+0xca>
 80024b2:	1961      	adds	r1, r4, r5
 80024b4:	42a3      	cmp	r3, r4
 80024b6:	6025      	str	r5, [r4, #0]
 80024b8:	bf18      	it	ne
 80024ba:	6059      	strne	r1, [r3, #4]
 80024bc:	6863      	ldr	r3, [r4, #4]
 80024be:	bf08      	it	eq
 80024c0:	f8c8 1000 	streq.w	r1, [r8]
 80024c4:	5162      	str	r2, [r4, r5]
 80024c6:	604b      	str	r3, [r1, #4]
 80024c8:	4638      	mov	r0, r7
 80024ca:	f104 060b 	add.w	r6, r4, #11
 80024ce:	f000 f829 	bl	8002524 <__malloc_unlock>
 80024d2:	f026 0607 	bic.w	r6, r6, #7
 80024d6:	1d23      	adds	r3, r4, #4
 80024d8:	1af2      	subs	r2, r6, r3
 80024da:	d0ae      	beq.n	800243a <_malloc_r+0x22>
 80024dc:	1b9b      	subs	r3, r3, r6
 80024de:	50a3      	str	r3, [r4, r2]
 80024e0:	e7ab      	b.n	800243a <_malloc_r+0x22>
 80024e2:	42a3      	cmp	r3, r4
 80024e4:	6862      	ldr	r2, [r4, #4]
 80024e6:	d1dd      	bne.n	80024a4 <_malloc_r+0x8c>
 80024e8:	f8c8 2000 	str.w	r2, [r8]
 80024ec:	e7ec      	b.n	80024c8 <_malloc_r+0xb0>
 80024ee:	4623      	mov	r3, r4
 80024f0:	6864      	ldr	r4, [r4, #4]
 80024f2:	e7ac      	b.n	800244e <_malloc_r+0x36>
 80024f4:	4634      	mov	r4, r6
 80024f6:	6876      	ldr	r6, [r6, #4]
 80024f8:	e7b4      	b.n	8002464 <_malloc_r+0x4c>
 80024fa:	4613      	mov	r3, r2
 80024fc:	e7cc      	b.n	8002498 <_malloc_r+0x80>
 80024fe:	230c      	movs	r3, #12
 8002500:	4638      	mov	r0, r7
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	f000 f80e 	bl	8002524 <__malloc_unlock>
 8002508:	e797      	b.n	800243a <_malloc_r+0x22>
 800250a:	6025      	str	r5, [r4, #0]
 800250c:	e7dc      	b.n	80024c8 <_malloc_r+0xb0>
 800250e:	605b      	str	r3, [r3, #4]
 8002510:	deff      	udf	#255	; 0xff
 8002512:	bf00      	nop
 8002514:	20000348 	.word	0x20000348

08002518 <__malloc_lock>:
 8002518:	4801      	ldr	r0, [pc, #4]	; (8002520 <__malloc_lock+0x8>)
 800251a:	f7ff bf13 	b.w	8002344 <__retarget_lock_acquire_recursive>
 800251e:	bf00      	nop
 8002520:	20000344 	.word	0x20000344

08002524 <__malloc_unlock>:
 8002524:	4801      	ldr	r0, [pc, #4]	; (800252c <__malloc_unlock+0x8>)
 8002526:	f7ff bf0e 	b.w	8002346 <__retarget_lock_release_recursive>
 800252a:	bf00      	nop
 800252c:	20000344 	.word	0x20000344

08002530 <__ssputs_r>:
 8002530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002534:	461f      	mov	r7, r3
 8002536:	688e      	ldr	r6, [r1, #8]
 8002538:	4682      	mov	sl, r0
 800253a:	42be      	cmp	r6, r7
 800253c:	460c      	mov	r4, r1
 800253e:	4690      	mov	r8, r2
 8002540:	680b      	ldr	r3, [r1, #0]
 8002542:	d82c      	bhi.n	800259e <__ssputs_r+0x6e>
 8002544:	898a      	ldrh	r2, [r1, #12]
 8002546:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800254a:	d026      	beq.n	800259a <__ssputs_r+0x6a>
 800254c:	6965      	ldr	r5, [r4, #20]
 800254e:	6909      	ldr	r1, [r1, #16]
 8002550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002554:	eba3 0901 	sub.w	r9, r3, r1
 8002558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800255c:	1c7b      	adds	r3, r7, #1
 800255e:	444b      	add	r3, r9
 8002560:	106d      	asrs	r5, r5, #1
 8002562:	429d      	cmp	r5, r3
 8002564:	bf38      	it	cc
 8002566:	461d      	movcc	r5, r3
 8002568:	0553      	lsls	r3, r2, #21
 800256a:	d527      	bpl.n	80025bc <__ssputs_r+0x8c>
 800256c:	4629      	mov	r1, r5
 800256e:	f7ff ff53 	bl	8002418 <_malloc_r>
 8002572:	4606      	mov	r6, r0
 8002574:	b360      	cbz	r0, 80025d0 <__ssputs_r+0xa0>
 8002576:	464a      	mov	r2, r9
 8002578:	6921      	ldr	r1, [r4, #16]
 800257a:	f000 fafd 	bl	8002b78 <memcpy>
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002588:	81a3      	strh	r3, [r4, #12]
 800258a:	6126      	str	r6, [r4, #16]
 800258c:	444e      	add	r6, r9
 800258e:	6026      	str	r6, [r4, #0]
 8002590:	463e      	mov	r6, r7
 8002592:	6165      	str	r5, [r4, #20]
 8002594:	eba5 0509 	sub.w	r5, r5, r9
 8002598:	60a5      	str	r5, [r4, #8]
 800259a:	42be      	cmp	r6, r7
 800259c:	d900      	bls.n	80025a0 <__ssputs_r+0x70>
 800259e:	463e      	mov	r6, r7
 80025a0:	4632      	mov	r2, r6
 80025a2:	4641      	mov	r1, r8
 80025a4:	6820      	ldr	r0, [r4, #0]
 80025a6:	f000 faaf 	bl	8002b08 <memmove>
 80025aa:	2000      	movs	r0, #0
 80025ac:	68a3      	ldr	r3, [r4, #8]
 80025ae:	1b9b      	subs	r3, r3, r6
 80025b0:	60a3      	str	r3, [r4, #8]
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	4433      	add	r3, r6
 80025b6:	6023      	str	r3, [r4, #0]
 80025b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025bc:	462a      	mov	r2, r5
 80025be:	f000 fae9 	bl	8002b94 <_realloc_r>
 80025c2:	4606      	mov	r6, r0
 80025c4:	2800      	cmp	r0, #0
 80025c6:	d1e0      	bne.n	800258a <__ssputs_r+0x5a>
 80025c8:	4650      	mov	r0, sl
 80025ca:	6921      	ldr	r1, [r4, #16]
 80025cc:	f7ff febc 	bl	8002348 <_free_r>
 80025d0:	230c      	movs	r3, #12
 80025d2:	f8ca 3000 	str.w	r3, [sl]
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025e0:	81a3      	strh	r3, [r4, #12]
 80025e2:	e7e9      	b.n	80025b8 <__ssputs_r+0x88>

080025e4 <_svfiprintf_r>:
 80025e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e8:	4698      	mov	r8, r3
 80025ea:	898b      	ldrh	r3, [r1, #12]
 80025ec:	4607      	mov	r7, r0
 80025ee:	061b      	lsls	r3, r3, #24
 80025f0:	460d      	mov	r5, r1
 80025f2:	4614      	mov	r4, r2
 80025f4:	b09d      	sub	sp, #116	; 0x74
 80025f6:	d50e      	bpl.n	8002616 <_svfiprintf_r+0x32>
 80025f8:	690b      	ldr	r3, [r1, #16]
 80025fa:	b963      	cbnz	r3, 8002616 <_svfiprintf_r+0x32>
 80025fc:	2140      	movs	r1, #64	; 0x40
 80025fe:	f7ff ff0b 	bl	8002418 <_malloc_r>
 8002602:	6028      	str	r0, [r5, #0]
 8002604:	6128      	str	r0, [r5, #16]
 8002606:	b920      	cbnz	r0, 8002612 <_svfiprintf_r+0x2e>
 8002608:	230c      	movs	r3, #12
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	e0d0      	b.n	80027b4 <_svfiprintf_r+0x1d0>
 8002612:	2340      	movs	r3, #64	; 0x40
 8002614:	616b      	str	r3, [r5, #20]
 8002616:	2300      	movs	r3, #0
 8002618:	9309      	str	r3, [sp, #36]	; 0x24
 800261a:	2320      	movs	r3, #32
 800261c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002620:	2330      	movs	r3, #48	; 0x30
 8002622:	f04f 0901 	mov.w	r9, #1
 8002626:	f8cd 800c 	str.w	r8, [sp, #12]
 800262a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80027cc <_svfiprintf_r+0x1e8>
 800262e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002632:	4623      	mov	r3, r4
 8002634:	469a      	mov	sl, r3
 8002636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800263a:	b10a      	cbz	r2, 8002640 <_svfiprintf_r+0x5c>
 800263c:	2a25      	cmp	r2, #37	; 0x25
 800263e:	d1f9      	bne.n	8002634 <_svfiprintf_r+0x50>
 8002640:	ebba 0b04 	subs.w	fp, sl, r4
 8002644:	d00b      	beq.n	800265e <_svfiprintf_r+0x7a>
 8002646:	465b      	mov	r3, fp
 8002648:	4622      	mov	r2, r4
 800264a:	4629      	mov	r1, r5
 800264c:	4638      	mov	r0, r7
 800264e:	f7ff ff6f 	bl	8002530 <__ssputs_r>
 8002652:	3001      	adds	r0, #1
 8002654:	f000 80a9 	beq.w	80027aa <_svfiprintf_r+0x1c6>
 8002658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800265a:	445a      	add	r2, fp
 800265c:	9209      	str	r2, [sp, #36]	; 0x24
 800265e:	f89a 3000 	ldrb.w	r3, [sl]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80a1 	beq.w	80027aa <_svfiprintf_r+0x1c6>
 8002668:	2300      	movs	r3, #0
 800266a:	f04f 32ff 	mov.w	r2, #4294967295
 800266e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002672:	f10a 0a01 	add.w	sl, sl, #1
 8002676:	9304      	str	r3, [sp, #16]
 8002678:	9307      	str	r3, [sp, #28]
 800267a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800267e:	931a      	str	r3, [sp, #104]	; 0x68
 8002680:	4654      	mov	r4, sl
 8002682:	2205      	movs	r2, #5
 8002684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002688:	4850      	ldr	r0, [pc, #320]	; (80027cc <_svfiprintf_r+0x1e8>)
 800268a:	f000 fa67 	bl	8002b5c <memchr>
 800268e:	9a04      	ldr	r2, [sp, #16]
 8002690:	b9d8      	cbnz	r0, 80026ca <_svfiprintf_r+0xe6>
 8002692:	06d0      	lsls	r0, r2, #27
 8002694:	bf44      	itt	mi
 8002696:	2320      	movmi	r3, #32
 8002698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800269c:	0711      	lsls	r1, r2, #28
 800269e:	bf44      	itt	mi
 80026a0:	232b      	movmi	r3, #43	; 0x2b
 80026a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026a6:	f89a 3000 	ldrb.w	r3, [sl]
 80026aa:	2b2a      	cmp	r3, #42	; 0x2a
 80026ac:	d015      	beq.n	80026da <_svfiprintf_r+0xf6>
 80026ae:	4654      	mov	r4, sl
 80026b0:	2000      	movs	r0, #0
 80026b2:	f04f 0c0a 	mov.w	ip, #10
 80026b6:	9a07      	ldr	r2, [sp, #28]
 80026b8:	4621      	mov	r1, r4
 80026ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026be:	3b30      	subs	r3, #48	; 0x30
 80026c0:	2b09      	cmp	r3, #9
 80026c2:	d94d      	bls.n	8002760 <_svfiprintf_r+0x17c>
 80026c4:	b1b0      	cbz	r0, 80026f4 <_svfiprintf_r+0x110>
 80026c6:	9207      	str	r2, [sp, #28]
 80026c8:	e014      	b.n	80026f4 <_svfiprintf_r+0x110>
 80026ca:	eba0 0308 	sub.w	r3, r0, r8
 80026ce:	fa09 f303 	lsl.w	r3, r9, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	46a2      	mov	sl, r4
 80026d6:	9304      	str	r3, [sp, #16]
 80026d8:	e7d2      	b.n	8002680 <_svfiprintf_r+0x9c>
 80026da:	9b03      	ldr	r3, [sp, #12]
 80026dc:	1d19      	adds	r1, r3, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	9103      	str	r1, [sp, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bfbb      	ittet	lt
 80026e6:	425b      	neglt	r3, r3
 80026e8:	f042 0202 	orrlt.w	r2, r2, #2
 80026ec:	9307      	strge	r3, [sp, #28]
 80026ee:	9307      	strlt	r3, [sp, #28]
 80026f0:	bfb8      	it	lt
 80026f2:	9204      	strlt	r2, [sp, #16]
 80026f4:	7823      	ldrb	r3, [r4, #0]
 80026f6:	2b2e      	cmp	r3, #46	; 0x2e
 80026f8:	d10c      	bne.n	8002714 <_svfiprintf_r+0x130>
 80026fa:	7863      	ldrb	r3, [r4, #1]
 80026fc:	2b2a      	cmp	r3, #42	; 0x2a
 80026fe:	d134      	bne.n	800276a <_svfiprintf_r+0x186>
 8002700:	9b03      	ldr	r3, [sp, #12]
 8002702:	3402      	adds	r4, #2
 8002704:	1d1a      	adds	r2, r3, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	9203      	str	r2, [sp, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	bfb8      	it	lt
 800270e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002712:	9305      	str	r3, [sp, #20]
 8002714:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80027d0 <_svfiprintf_r+0x1ec>
 8002718:	2203      	movs	r2, #3
 800271a:	4650      	mov	r0, sl
 800271c:	7821      	ldrb	r1, [r4, #0]
 800271e:	f000 fa1d 	bl	8002b5c <memchr>
 8002722:	b138      	cbz	r0, 8002734 <_svfiprintf_r+0x150>
 8002724:	2240      	movs	r2, #64	; 0x40
 8002726:	9b04      	ldr	r3, [sp, #16]
 8002728:	eba0 000a 	sub.w	r0, r0, sl
 800272c:	4082      	lsls	r2, r0
 800272e:	4313      	orrs	r3, r2
 8002730:	3401      	adds	r4, #1
 8002732:	9304      	str	r3, [sp, #16]
 8002734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002738:	2206      	movs	r2, #6
 800273a:	4826      	ldr	r0, [pc, #152]	; (80027d4 <_svfiprintf_r+0x1f0>)
 800273c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002740:	f000 fa0c 	bl	8002b5c <memchr>
 8002744:	2800      	cmp	r0, #0
 8002746:	d038      	beq.n	80027ba <_svfiprintf_r+0x1d6>
 8002748:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <_svfiprintf_r+0x1f4>)
 800274a:	bb1b      	cbnz	r3, 8002794 <_svfiprintf_r+0x1b0>
 800274c:	9b03      	ldr	r3, [sp, #12]
 800274e:	3307      	adds	r3, #7
 8002750:	f023 0307 	bic.w	r3, r3, #7
 8002754:	3308      	adds	r3, #8
 8002756:	9303      	str	r3, [sp, #12]
 8002758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800275a:	4433      	add	r3, r6
 800275c:	9309      	str	r3, [sp, #36]	; 0x24
 800275e:	e768      	b.n	8002632 <_svfiprintf_r+0x4e>
 8002760:	460c      	mov	r4, r1
 8002762:	2001      	movs	r0, #1
 8002764:	fb0c 3202 	mla	r2, ip, r2, r3
 8002768:	e7a6      	b.n	80026b8 <_svfiprintf_r+0xd4>
 800276a:	2300      	movs	r3, #0
 800276c:	f04f 0c0a 	mov.w	ip, #10
 8002770:	4619      	mov	r1, r3
 8002772:	3401      	adds	r4, #1
 8002774:	9305      	str	r3, [sp, #20]
 8002776:	4620      	mov	r0, r4
 8002778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800277c:	3a30      	subs	r2, #48	; 0x30
 800277e:	2a09      	cmp	r2, #9
 8002780:	d903      	bls.n	800278a <_svfiprintf_r+0x1a6>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0c6      	beq.n	8002714 <_svfiprintf_r+0x130>
 8002786:	9105      	str	r1, [sp, #20]
 8002788:	e7c4      	b.n	8002714 <_svfiprintf_r+0x130>
 800278a:	4604      	mov	r4, r0
 800278c:	2301      	movs	r3, #1
 800278e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002792:	e7f0      	b.n	8002776 <_svfiprintf_r+0x192>
 8002794:	ab03      	add	r3, sp, #12
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	462a      	mov	r2, r5
 800279a:	4638      	mov	r0, r7
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <_svfiprintf_r+0x1f8>)
 800279e:	a904      	add	r1, sp, #16
 80027a0:	f3af 8000 	nop.w
 80027a4:	1c42      	adds	r2, r0, #1
 80027a6:	4606      	mov	r6, r0
 80027a8:	d1d6      	bne.n	8002758 <_svfiprintf_r+0x174>
 80027aa:	89ab      	ldrh	r3, [r5, #12]
 80027ac:	065b      	lsls	r3, r3, #25
 80027ae:	f53f af2d 	bmi.w	800260c <_svfiprintf_r+0x28>
 80027b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027b4:	b01d      	add	sp, #116	; 0x74
 80027b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ba:	ab03      	add	r3, sp, #12
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	462a      	mov	r2, r5
 80027c0:	4638      	mov	r0, r7
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <_svfiprintf_r+0x1f8>)
 80027c4:	a904      	add	r1, sp, #16
 80027c6:	f000 f87d 	bl	80028c4 <_printf_i>
 80027ca:	e7eb      	b.n	80027a4 <_svfiprintf_r+0x1c0>
 80027cc:	08002c56 	.word	0x08002c56
 80027d0:	08002c5c 	.word	0x08002c5c
 80027d4:	08002c60 	.word	0x08002c60
 80027d8:	00000000 	.word	0x00000000
 80027dc:	08002531 	.word	0x08002531

080027e0 <_printf_common>:
 80027e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e4:	4616      	mov	r6, r2
 80027e6:	4699      	mov	r9, r3
 80027e8:	688a      	ldr	r2, [r1, #8]
 80027ea:	690b      	ldr	r3, [r1, #16]
 80027ec:	4607      	mov	r7, r0
 80027ee:	4293      	cmp	r3, r2
 80027f0:	bfb8      	it	lt
 80027f2:	4613      	movlt	r3, r2
 80027f4:	6033      	str	r3, [r6, #0]
 80027f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027fa:	460c      	mov	r4, r1
 80027fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002800:	b10a      	cbz	r2, 8002806 <_printf_common+0x26>
 8002802:	3301      	adds	r3, #1
 8002804:	6033      	str	r3, [r6, #0]
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	0699      	lsls	r1, r3, #26
 800280a:	bf42      	ittt	mi
 800280c:	6833      	ldrmi	r3, [r6, #0]
 800280e:	3302      	addmi	r3, #2
 8002810:	6033      	strmi	r3, [r6, #0]
 8002812:	6825      	ldr	r5, [r4, #0]
 8002814:	f015 0506 	ands.w	r5, r5, #6
 8002818:	d106      	bne.n	8002828 <_printf_common+0x48>
 800281a:	f104 0a19 	add.w	sl, r4, #25
 800281e:	68e3      	ldr	r3, [r4, #12]
 8002820:	6832      	ldr	r2, [r6, #0]
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	42ab      	cmp	r3, r5
 8002826:	dc2b      	bgt.n	8002880 <_printf_common+0xa0>
 8002828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800282c:	1e13      	subs	r3, r2, #0
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	bf18      	it	ne
 8002832:	2301      	movne	r3, #1
 8002834:	0692      	lsls	r2, r2, #26
 8002836:	d430      	bmi.n	800289a <_printf_common+0xba>
 8002838:	4649      	mov	r1, r9
 800283a:	4638      	mov	r0, r7
 800283c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002840:	47c0      	blx	r8
 8002842:	3001      	adds	r0, #1
 8002844:	d023      	beq.n	800288e <_printf_common+0xae>
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	6922      	ldr	r2, [r4, #16]
 800284a:	f003 0306 	and.w	r3, r3, #6
 800284e:	2b04      	cmp	r3, #4
 8002850:	bf14      	ite	ne
 8002852:	2500      	movne	r5, #0
 8002854:	6833      	ldreq	r3, [r6, #0]
 8002856:	f04f 0600 	mov.w	r6, #0
 800285a:	bf08      	it	eq
 800285c:	68e5      	ldreq	r5, [r4, #12]
 800285e:	f104 041a 	add.w	r4, r4, #26
 8002862:	bf08      	it	eq
 8002864:	1aed      	subeq	r5, r5, r3
 8002866:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800286a:	bf08      	it	eq
 800286c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002870:	4293      	cmp	r3, r2
 8002872:	bfc4      	itt	gt
 8002874:	1a9b      	subgt	r3, r3, r2
 8002876:	18ed      	addgt	r5, r5, r3
 8002878:	42b5      	cmp	r5, r6
 800287a:	d11a      	bne.n	80028b2 <_printf_common+0xd2>
 800287c:	2000      	movs	r0, #0
 800287e:	e008      	b.n	8002892 <_printf_common+0xb2>
 8002880:	2301      	movs	r3, #1
 8002882:	4652      	mov	r2, sl
 8002884:	4649      	mov	r1, r9
 8002886:	4638      	mov	r0, r7
 8002888:	47c0      	blx	r8
 800288a:	3001      	adds	r0, #1
 800288c:	d103      	bne.n	8002896 <_printf_common+0xb6>
 800288e:	f04f 30ff 	mov.w	r0, #4294967295
 8002892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002896:	3501      	adds	r5, #1
 8002898:	e7c1      	b.n	800281e <_printf_common+0x3e>
 800289a:	2030      	movs	r0, #48	; 0x30
 800289c:	18e1      	adds	r1, r4, r3
 800289e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028a8:	4422      	add	r2, r4
 80028aa:	3302      	adds	r3, #2
 80028ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028b0:	e7c2      	b.n	8002838 <_printf_common+0x58>
 80028b2:	2301      	movs	r3, #1
 80028b4:	4622      	mov	r2, r4
 80028b6:	4649      	mov	r1, r9
 80028b8:	4638      	mov	r0, r7
 80028ba:	47c0      	blx	r8
 80028bc:	3001      	adds	r0, #1
 80028be:	d0e6      	beq.n	800288e <_printf_common+0xae>
 80028c0:	3601      	adds	r6, #1
 80028c2:	e7d9      	b.n	8002878 <_printf_common+0x98>

080028c4 <_printf_i>:
 80028c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028c8:	7e0f      	ldrb	r7, [r1, #24]
 80028ca:	4691      	mov	r9, r2
 80028cc:	2f78      	cmp	r7, #120	; 0x78
 80028ce:	4680      	mov	r8, r0
 80028d0:	460c      	mov	r4, r1
 80028d2:	469a      	mov	sl, r3
 80028d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028da:	d807      	bhi.n	80028ec <_printf_i+0x28>
 80028dc:	2f62      	cmp	r7, #98	; 0x62
 80028de:	d80a      	bhi.n	80028f6 <_printf_i+0x32>
 80028e0:	2f00      	cmp	r7, #0
 80028e2:	f000 80d5 	beq.w	8002a90 <_printf_i+0x1cc>
 80028e6:	2f58      	cmp	r7, #88	; 0x58
 80028e8:	f000 80c1 	beq.w	8002a6e <_printf_i+0x1aa>
 80028ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028f4:	e03a      	b.n	800296c <_printf_i+0xa8>
 80028f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028fa:	2b15      	cmp	r3, #21
 80028fc:	d8f6      	bhi.n	80028ec <_printf_i+0x28>
 80028fe:	a101      	add	r1, pc, #4	; (adr r1, 8002904 <_printf_i+0x40>)
 8002900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002904:	0800295d 	.word	0x0800295d
 8002908:	08002971 	.word	0x08002971
 800290c:	080028ed 	.word	0x080028ed
 8002910:	080028ed 	.word	0x080028ed
 8002914:	080028ed 	.word	0x080028ed
 8002918:	080028ed 	.word	0x080028ed
 800291c:	08002971 	.word	0x08002971
 8002920:	080028ed 	.word	0x080028ed
 8002924:	080028ed 	.word	0x080028ed
 8002928:	080028ed 	.word	0x080028ed
 800292c:	080028ed 	.word	0x080028ed
 8002930:	08002a77 	.word	0x08002a77
 8002934:	0800299d 	.word	0x0800299d
 8002938:	08002a31 	.word	0x08002a31
 800293c:	080028ed 	.word	0x080028ed
 8002940:	080028ed 	.word	0x080028ed
 8002944:	08002a99 	.word	0x08002a99
 8002948:	080028ed 	.word	0x080028ed
 800294c:	0800299d 	.word	0x0800299d
 8002950:	080028ed 	.word	0x080028ed
 8002954:	080028ed 	.word	0x080028ed
 8002958:	08002a39 	.word	0x08002a39
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	1d1a      	adds	r2, r3, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	602a      	str	r2, [r5, #0]
 8002964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800296c:	2301      	movs	r3, #1
 800296e:	e0a0      	b.n	8002ab2 <_printf_i+0x1ee>
 8002970:	6820      	ldr	r0, [r4, #0]
 8002972:	682b      	ldr	r3, [r5, #0]
 8002974:	0607      	lsls	r7, r0, #24
 8002976:	f103 0104 	add.w	r1, r3, #4
 800297a:	6029      	str	r1, [r5, #0]
 800297c:	d501      	bpl.n	8002982 <_printf_i+0xbe>
 800297e:	681e      	ldr	r6, [r3, #0]
 8002980:	e003      	b.n	800298a <_printf_i+0xc6>
 8002982:	0646      	lsls	r6, r0, #25
 8002984:	d5fb      	bpl.n	800297e <_printf_i+0xba>
 8002986:	f9b3 6000 	ldrsh.w	r6, [r3]
 800298a:	2e00      	cmp	r6, #0
 800298c:	da03      	bge.n	8002996 <_printf_i+0xd2>
 800298e:	232d      	movs	r3, #45	; 0x2d
 8002990:	4276      	negs	r6, r6
 8002992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002996:	230a      	movs	r3, #10
 8002998:	4859      	ldr	r0, [pc, #356]	; (8002b00 <_printf_i+0x23c>)
 800299a:	e012      	b.n	80029c2 <_printf_i+0xfe>
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	6820      	ldr	r0, [r4, #0]
 80029a0:	1d19      	adds	r1, r3, #4
 80029a2:	6029      	str	r1, [r5, #0]
 80029a4:	0605      	lsls	r5, r0, #24
 80029a6:	d501      	bpl.n	80029ac <_printf_i+0xe8>
 80029a8:	681e      	ldr	r6, [r3, #0]
 80029aa:	e002      	b.n	80029b2 <_printf_i+0xee>
 80029ac:	0641      	lsls	r1, r0, #25
 80029ae:	d5fb      	bpl.n	80029a8 <_printf_i+0xe4>
 80029b0:	881e      	ldrh	r6, [r3, #0]
 80029b2:	2f6f      	cmp	r7, #111	; 0x6f
 80029b4:	bf0c      	ite	eq
 80029b6:	2308      	moveq	r3, #8
 80029b8:	230a      	movne	r3, #10
 80029ba:	4851      	ldr	r0, [pc, #324]	; (8002b00 <_printf_i+0x23c>)
 80029bc:	2100      	movs	r1, #0
 80029be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029c2:	6865      	ldr	r5, [r4, #4]
 80029c4:	2d00      	cmp	r5, #0
 80029c6:	bfa8      	it	ge
 80029c8:	6821      	ldrge	r1, [r4, #0]
 80029ca:	60a5      	str	r5, [r4, #8]
 80029cc:	bfa4      	itt	ge
 80029ce:	f021 0104 	bicge.w	r1, r1, #4
 80029d2:	6021      	strge	r1, [r4, #0]
 80029d4:	b90e      	cbnz	r6, 80029da <_printf_i+0x116>
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d04b      	beq.n	8002a72 <_printf_i+0x1ae>
 80029da:	4615      	mov	r5, r2
 80029dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80029e0:	fb03 6711 	mls	r7, r3, r1, r6
 80029e4:	5dc7      	ldrb	r7, [r0, r7]
 80029e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029ea:	4637      	mov	r7, r6
 80029ec:	42bb      	cmp	r3, r7
 80029ee:	460e      	mov	r6, r1
 80029f0:	d9f4      	bls.n	80029dc <_printf_i+0x118>
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d10b      	bne.n	8002a0e <_printf_i+0x14a>
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	07de      	lsls	r6, r3, #31
 80029fa:	d508      	bpl.n	8002a0e <_printf_i+0x14a>
 80029fc:	6923      	ldr	r3, [r4, #16]
 80029fe:	6861      	ldr	r1, [r4, #4]
 8002a00:	4299      	cmp	r1, r3
 8002a02:	bfde      	ittt	le
 8002a04:	2330      	movle	r3, #48	; 0x30
 8002a06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a0e:	1b52      	subs	r2, r2, r5
 8002a10:	6122      	str	r2, [r4, #16]
 8002a12:	464b      	mov	r3, r9
 8002a14:	4621      	mov	r1, r4
 8002a16:	4640      	mov	r0, r8
 8002a18:	f8cd a000 	str.w	sl, [sp]
 8002a1c:	aa03      	add	r2, sp, #12
 8002a1e:	f7ff fedf 	bl	80027e0 <_printf_common>
 8002a22:	3001      	adds	r0, #1
 8002a24:	d14a      	bne.n	8002abc <_printf_i+0x1f8>
 8002a26:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2a:	b004      	add	sp, #16
 8002a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	f043 0320 	orr.w	r3, r3, #32
 8002a36:	6023      	str	r3, [r4, #0]
 8002a38:	2778      	movs	r7, #120	; 0x78
 8002a3a:	4832      	ldr	r0, [pc, #200]	; (8002b04 <_printf_i+0x240>)
 8002a3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	6829      	ldr	r1, [r5, #0]
 8002a44:	061f      	lsls	r7, r3, #24
 8002a46:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a4a:	d402      	bmi.n	8002a52 <_printf_i+0x18e>
 8002a4c:	065f      	lsls	r7, r3, #25
 8002a4e:	bf48      	it	mi
 8002a50:	b2b6      	uxthmi	r6, r6
 8002a52:	07df      	lsls	r7, r3, #31
 8002a54:	bf48      	it	mi
 8002a56:	f043 0320 	orrmi.w	r3, r3, #32
 8002a5a:	6029      	str	r1, [r5, #0]
 8002a5c:	bf48      	it	mi
 8002a5e:	6023      	strmi	r3, [r4, #0]
 8002a60:	b91e      	cbnz	r6, 8002a6a <_printf_i+0x1a6>
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	f023 0320 	bic.w	r3, r3, #32
 8002a68:	6023      	str	r3, [r4, #0]
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	e7a6      	b.n	80029bc <_printf_i+0xf8>
 8002a6e:	4824      	ldr	r0, [pc, #144]	; (8002b00 <_printf_i+0x23c>)
 8002a70:	e7e4      	b.n	8002a3c <_printf_i+0x178>
 8002a72:	4615      	mov	r5, r2
 8002a74:	e7bd      	b.n	80029f2 <_printf_i+0x12e>
 8002a76:	682b      	ldr	r3, [r5, #0]
 8002a78:	6826      	ldr	r6, [r4, #0]
 8002a7a:	1d18      	adds	r0, r3, #4
 8002a7c:	6961      	ldr	r1, [r4, #20]
 8002a7e:	6028      	str	r0, [r5, #0]
 8002a80:	0635      	lsls	r5, r6, #24
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	d501      	bpl.n	8002a8a <_printf_i+0x1c6>
 8002a86:	6019      	str	r1, [r3, #0]
 8002a88:	e002      	b.n	8002a90 <_printf_i+0x1cc>
 8002a8a:	0670      	lsls	r0, r6, #25
 8002a8c:	d5fb      	bpl.n	8002a86 <_printf_i+0x1c2>
 8002a8e:	8019      	strh	r1, [r3, #0]
 8002a90:	2300      	movs	r3, #0
 8002a92:	4615      	mov	r5, r2
 8002a94:	6123      	str	r3, [r4, #16]
 8002a96:	e7bc      	b.n	8002a12 <_printf_i+0x14e>
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	1d1a      	adds	r2, r3, #4
 8002a9e:	602a      	str	r2, [r5, #0]
 8002aa0:	681d      	ldr	r5, [r3, #0]
 8002aa2:	6862      	ldr	r2, [r4, #4]
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	f000 f859 	bl	8002b5c <memchr>
 8002aaa:	b108      	cbz	r0, 8002ab0 <_printf_i+0x1ec>
 8002aac:	1b40      	subs	r0, r0, r5
 8002aae:	6060      	str	r0, [r4, #4]
 8002ab0:	6863      	ldr	r3, [r4, #4]
 8002ab2:	6123      	str	r3, [r4, #16]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aba:	e7aa      	b.n	8002a12 <_printf_i+0x14e>
 8002abc:	462a      	mov	r2, r5
 8002abe:	4649      	mov	r1, r9
 8002ac0:	4640      	mov	r0, r8
 8002ac2:	6923      	ldr	r3, [r4, #16]
 8002ac4:	47d0      	blx	sl
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	d0ad      	beq.n	8002a26 <_printf_i+0x162>
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	079b      	lsls	r3, r3, #30
 8002ace:	d413      	bmi.n	8002af8 <_printf_i+0x234>
 8002ad0:	68e0      	ldr	r0, [r4, #12]
 8002ad2:	9b03      	ldr	r3, [sp, #12]
 8002ad4:	4298      	cmp	r0, r3
 8002ad6:	bfb8      	it	lt
 8002ad8:	4618      	movlt	r0, r3
 8002ada:	e7a6      	b.n	8002a2a <_printf_i+0x166>
 8002adc:	2301      	movs	r3, #1
 8002ade:	4632      	mov	r2, r6
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	4640      	mov	r0, r8
 8002ae4:	47d0      	blx	sl
 8002ae6:	3001      	adds	r0, #1
 8002ae8:	d09d      	beq.n	8002a26 <_printf_i+0x162>
 8002aea:	3501      	adds	r5, #1
 8002aec:	68e3      	ldr	r3, [r4, #12]
 8002aee:	9903      	ldr	r1, [sp, #12]
 8002af0:	1a5b      	subs	r3, r3, r1
 8002af2:	42ab      	cmp	r3, r5
 8002af4:	dcf2      	bgt.n	8002adc <_printf_i+0x218>
 8002af6:	e7eb      	b.n	8002ad0 <_printf_i+0x20c>
 8002af8:	2500      	movs	r5, #0
 8002afa:	f104 0619 	add.w	r6, r4, #25
 8002afe:	e7f5      	b.n	8002aec <_printf_i+0x228>
 8002b00:	08002c67 	.word	0x08002c67
 8002b04:	08002c78 	.word	0x08002c78

08002b08 <memmove>:
 8002b08:	4288      	cmp	r0, r1
 8002b0a:	b510      	push	{r4, lr}
 8002b0c:	eb01 0402 	add.w	r4, r1, r2
 8002b10:	d902      	bls.n	8002b18 <memmove+0x10>
 8002b12:	4284      	cmp	r4, r0
 8002b14:	4623      	mov	r3, r4
 8002b16:	d807      	bhi.n	8002b28 <memmove+0x20>
 8002b18:	1e43      	subs	r3, r0, #1
 8002b1a:	42a1      	cmp	r1, r4
 8002b1c:	d008      	beq.n	8002b30 <memmove+0x28>
 8002b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b26:	e7f8      	b.n	8002b1a <memmove+0x12>
 8002b28:	4601      	mov	r1, r0
 8002b2a:	4402      	add	r2, r0
 8002b2c:	428a      	cmp	r2, r1
 8002b2e:	d100      	bne.n	8002b32 <memmove+0x2a>
 8002b30:	bd10      	pop	{r4, pc}
 8002b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b3a:	e7f7      	b.n	8002b2c <memmove+0x24>

08002b3c <_sbrk_r>:
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	2300      	movs	r3, #0
 8002b40:	4d05      	ldr	r5, [pc, #20]	; (8002b58 <_sbrk_r+0x1c>)
 8002b42:	4604      	mov	r4, r0
 8002b44:	4608      	mov	r0, r1
 8002b46:	602b      	str	r3, [r5, #0]
 8002b48:	f7fd fe9c 	bl	8000884 <_sbrk>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d102      	bne.n	8002b56 <_sbrk_r+0x1a>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	b103      	cbz	r3, 8002b56 <_sbrk_r+0x1a>
 8002b54:	6023      	str	r3, [r4, #0]
 8002b56:	bd38      	pop	{r3, r4, r5, pc}
 8002b58:	20000340 	.word	0x20000340

08002b5c <memchr>:
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b510      	push	{r4, lr}
 8002b60:	b2c9      	uxtb	r1, r1
 8002b62:	4402      	add	r2, r0
 8002b64:	4293      	cmp	r3, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	d101      	bne.n	8002b6e <memchr+0x12>
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	e003      	b.n	8002b76 <memchr+0x1a>
 8002b6e:	7804      	ldrb	r4, [r0, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	428c      	cmp	r4, r1
 8002b74:	d1f6      	bne.n	8002b64 <memchr+0x8>
 8002b76:	bd10      	pop	{r4, pc}

08002b78 <memcpy>:
 8002b78:	440a      	add	r2, r1
 8002b7a:	4291      	cmp	r1, r2
 8002b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b80:	d100      	bne.n	8002b84 <memcpy+0xc>
 8002b82:	4770      	bx	lr
 8002b84:	b510      	push	{r4, lr}
 8002b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b8a:	4291      	cmp	r1, r2
 8002b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b90:	d1f9      	bne.n	8002b86 <memcpy+0xe>
 8002b92:	bd10      	pop	{r4, pc}

08002b94 <_realloc_r>:
 8002b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b98:	4680      	mov	r8, r0
 8002b9a:	4614      	mov	r4, r2
 8002b9c:	460e      	mov	r6, r1
 8002b9e:	b921      	cbnz	r1, 8002baa <_realloc_r+0x16>
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba6:	f7ff bc37 	b.w	8002418 <_malloc_r>
 8002baa:	b92a      	cbnz	r2, 8002bb8 <_realloc_r+0x24>
 8002bac:	f7ff fbcc 	bl	8002348 <_free_r>
 8002bb0:	4625      	mov	r5, r4
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bb8:	f000 f81b 	bl	8002bf2 <_malloc_usable_size_r>
 8002bbc:	4284      	cmp	r4, r0
 8002bbe:	4607      	mov	r7, r0
 8002bc0:	d802      	bhi.n	8002bc8 <_realloc_r+0x34>
 8002bc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002bc6:	d812      	bhi.n	8002bee <_realloc_r+0x5a>
 8002bc8:	4621      	mov	r1, r4
 8002bca:	4640      	mov	r0, r8
 8002bcc:	f7ff fc24 	bl	8002418 <_malloc_r>
 8002bd0:	4605      	mov	r5, r0
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d0ed      	beq.n	8002bb2 <_realloc_r+0x1e>
 8002bd6:	42bc      	cmp	r4, r7
 8002bd8:	4622      	mov	r2, r4
 8002bda:	4631      	mov	r1, r6
 8002bdc:	bf28      	it	cs
 8002bde:	463a      	movcs	r2, r7
 8002be0:	f7ff ffca 	bl	8002b78 <memcpy>
 8002be4:	4631      	mov	r1, r6
 8002be6:	4640      	mov	r0, r8
 8002be8:	f7ff fbae 	bl	8002348 <_free_r>
 8002bec:	e7e1      	b.n	8002bb2 <_realloc_r+0x1e>
 8002bee:	4635      	mov	r5, r6
 8002bf0:	e7df      	b.n	8002bb2 <_realloc_r+0x1e>

08002bf2 <_malloc_usable_size_r>:
 8002bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bf6:	1f18      	subs	r0, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bfbc      	itt	lt
 8002bfc:	580b      	ldrlt	r3, [r1, r0]
 8002bfe:	18c0      	addlt	r0, r0, r3
 8002c00:	4770      	bx	lr
	...

08002c04 <_init>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr

08002c10 <_fini>:
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	bf00      	nop
 8002c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c16:	bc08      	pop	{r3}
 8002c18:	469e      	mov	lr, r3
 8002c1a:	4770      	bx	lr
